package org.anonymous.Redis;

/**
 * @author child
 * 2019/4/6 16:14
 *
 * 启动 redis, 目录下 cmd $ redis-server redis.windows.conf
 * windows 注册 redis 服务.
 * $ redis‐server ‐‐service‐install redis.windows‐service.conf ‐‐loglevel verbose
 * 常用的redis服务命令如下：
 * 进入redis安装目录：
 * 卸载服务：redis-server.exe --service-uninstall
 * 开启服务：redis-server.exe --service-start
 * 停止服务：redis-server.exe --service-stop
 *
 *
 * 缓存穿透
 *   请求查询数据库根本就没有的数据, 如果有恶意攻击, 由于缓存中没有数据, 将会对数据库造成持续的压力,可能引起数据库宕机
 *   解决: 将没有数据的 key 对应的 value 设置为 null, 后面再次查询 此 key, 直接返回 null.
 * 缓存击穿(热点 key)
 *   在高并发的系统中,大量的请求同时查询一个 key, 此时 key 刚好失效, 就会导致大量的请求直接访问数据库, 导致数据库宕机
 *   解决: 在第一个查询数据的请求上使用互斥锁, 其他线程走到这一步无法获取锁, 等到第一个线程查询到数据, 然后做缓存, 其他线程
 *      发现有缓存,直接走缓存.
 * 缓存雪崩
 *   某一时刻,大量的缓存失效,此时就会有大量的请求直接打到数据库
 *   解决: 使用集群缓存, 保证缓存服务高可用: redis 主从 + 哨兵
 *      设置过期时间

   缓存和数据库双写不一致
     连续写数据库和缓存,但是操作期间,出现并发来了,数据不一致了.
     通常,更新缓存和数据库有以下几种顺序:
       1. 先更新数据库,再更新缓存.
       2. 先删除缓存,再更新数据库.
       3. 先更新数据库,再删除缓存.
     三种方式的优劣:
      1. 方式一的问题: 当有两个请求同时更新时,如果不使用分布式锁,将无法控制最后缓存的值到底是多少. 也就是并发写问题.
        这套方案，大家是普遍反对的，为什么呢？有如下两点原因：
        原因一、线程安全角度
            同时有请求A和请求B进行更新操作，那么会出现：
                线程A更新了数据库；
                线程B更新了数据库；
                线程B更新了缓存；
                线程A更新了缓存；
            这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据，因此不考虑！
        原因二、业务场景角度
            有如下两点：
            （1）如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。
            （2）如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。
        接下来讨论的就是争议最大的，先删缓存，再更新数据库。还是先更新数据库，再删缓存的问题。
      2. 方式二的问题: 如果再删除缓存后,有客户端读数据,将可能读到旧数据,并有可能设置到缓存中,导致缓存中的数据一直是老数据.
         该方案会导致不一致的原因是：同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么会出现如下情形:
         （1）请求A进行写操作，删除缓存；
         （2）请求B查询发现缓存不存在；
         （3）请求B去数据库查询得到旧值；
         （4）请求B将旧值写入缓存；
         （5）请求A将新值写入数据库；
         上述情况就会导致不一致的情形出现。而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。
         有两种解决方案:
         1) 使用 "延时双删策略": 先淘汰缓存; 再写数据库; 休眠一定时间,再次淘汰缓存. 这么做可以对该段时间内的脏数据再次删除.
         2) 使用队列: 当这个 key 不存在时,将其放入队列,串行执行,必须等到更新数据库完毕才能读取数据.
      3. 方式三: 先更新数据库,再删除缓存.
         这个实际是常用的方案,称为 Cache Aside Pattern.
         · 失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中；
         · 命中：应用程序从cache中取数据，取到后返回；
         · 更新：先把数据存到数据库中，成功后，再让缓存失效；
 *      
 * 1、完全基于内存,绝大部分请求是纯粹的内存操作,非常快速。数据存在内存中,类似于HashMap,HashMap的优势就是查找和操作的时间复杂度都是O(1)；
 * 2、数据结构简单,对数据操作也简单,Redis中的数据结构是专门进行设计的；
 * 3、采用单线程,避免了不必要的上下文切换和竞争条件,也不存在多进程或者多线程导致的切换而消耗 CPU,不用去考虑各种锁的问题,不存在加锁释放锁操作,没有因为可能出现死锁而导致的性能消耗；
 * 4、使用多路I/O复用模型,非阻塞IO；
 * 5、使用底层模型不同,它们之间底层实现方式以及与客户端之间通信的应用协议不一样,Redis直接自己构建了VM 机制 ,因为一般的系统调用系统函数的话,会浪费一定的时间去移动和请求；
 *    以上几点都比较好理解,下边我们针对多路 I/O 复用模型进行简单的探讨：
 *   多路 I/O 复用模型
 *   多路I/O复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力,在空闲的时候,会把当前线程阻塞掉,
 *   当有一个或多个流有 I/O 事件时,就从阻塞态中唤醒,于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流）,
 *   并且只依次顺序的处理就绪的流,这种做法就避免了大量的无用操作。
 *   这里“多路”指的是多个网络连接,“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗）,
 *   且 Redis 在内存中操作数据的速度非常快,也就是说内存内的操作不会成为影响Redis性能的瓶颈,主要由以上几点造就了 Redis 具有很高的吞吐量。
 * 
 * 
 * 
 * 
 * Redis: 一种缓存技术 -- NOSQL 数据库: 非关系型内存数据库
 *  概述: redis 是用 C 语言开发的一个开源的高性能 键值对(key-value) 数据库
 *  Mysql 数据库的数据: 以表为单位, 表 以文件的形式存在 硬盘上
 *  Redis: 数据是键值对形式: 数据缓存在 内存中
 *      避免了浏览器的请求频繁的访问数据库
 *  场景:
 *      在企业级开发, 需要完成导航条的数据,但是导航条的数据一般都是来源于数据库,只要每个人过来看到导航条的数据,
 *      就意味着 链接了一次数据库, 如果有 1w 人访问,就需要连 1w 次数据库,在这里,我们发现所有人链接数据库拿到的数据都是一样的,
 *      也就意味着这个导航条的数据不是时时更新的数据,既然所有人看到的都一样,那有没有什么更好的方式去解决频繁操作数据库带来的低效率问题
 *     注: 可以考虑存在域对象(ServletContext)中, 但是 服务器关闭,则 ServletContext 域中的数据会消失
 *  方案:
 *      让第一个访问的人去 MySQL 数据库先获取一份, 然后放入内存中(缓存), 剩下所有人再去内存获取即可, 避免了与Mysql数据库的频繁交互
 *      (操作一次硬盘上的数据,实际上就是操作了一次 IO 流)
 *  解决:
 *      NOSQL 数据库: 非关系型 内存 数据库 -- redis 只是 NOSQL 数据库的一种
 *      作用: 减少频繁访问数据库带来的效率低下问题  --- 缓存技术
 *  (面试题): 非关系型数据库和关系型数据库的区别
 *      关系型数据库: MySQL db2 Oracle..
 *         特点: 数据库(数据)都在硬盘上, 数据和数据之间存在关系,即表和表之间有关系(一对一,一对多,多对多)
 *         优点: 数据的安全性和完整性都高
 *         缺点: 查询慢(读取文件,查询数据)
 *      非关系型数据库: redis, mongoDB...
 *         特点: 数据都在内存中,数据和数据之间不存在关系,都是键值对形式 (key(string类型) -- value(5种))
 *         优点: 查询快
 *         缺点: 数据的安全性和完整性都低 -- 第一个人从关系型数据库(MySQL)中取, 将数据存到 非关系型数据库(redis)中取
 *  企业级开发: 关系型数据库和非关系型数据库一起互补使用
 *  redis 应用场景:
 *      新闻内容
 *      聊天室好友
 *      12306: 余票数(有更新间期)
 * redis 数据类型
 *    key 都是字符串, value 有 5 种形式
 *    1.字符串类型(掌握)   String=String  -- s1="json" -- 实际上就是 json 数据的字符串形式
 *    2.散列类型(了解)     String=hash       s2=key:value
 *    3.列表类型(了解)     String=list       s3=a,b,c,d  -- 可重复
 *    4.集合类型(了解)     String=set        s4=a,b,c,d  -- 不可重复
 *    5.有序集合类型(了解)  String=zset       s5=a,b,c,d  -- 有序
 * 操作:
 *  按 value 类型:
 *   1.字符串类型: (String)
 *      设置: set key value
 *      获取: get key
 *      删除: del key
 *   2.散列类型: (HASH)
 *      把值 value 看成 map 集合(适合存储对象的属性值)
 *      设置单个 属性
 *          hset key subkey subvalue                -- hset user username jack
 *      设置多个 属性
 *          hmset key subkey1 subvalue1 subkey2 subvalue2...      -- hmset user username jack password 123424
 *      获取单个属性的值
 *          hget key subkey  -- hget user username
 *          hmget key subkey -- hmget user password
 *      获取多个属性的值
 *          hmget key subkey1 subkey2... -- hmget user username password
 *      获取所有属性及其值
 *          hgetall key: 获取指定 key 值下的所有信息  -- hgetall user
 *      删除子健及其值: subkey 及其对应的 subvalue
 *          hdel key subkey1 subkey2... -- hdel user password
 *      删除所有数据
 *          del key -- del user
 * 3.列表类型 (使用较少) (有序可重复)  (list)
 *   两端设置:
 *      lpush key member1 menber2..: 从左边插入 -- 先插入的排在右边
 *          eg: lpush l1 a b c d  --> d,c,b,a
 *      rpush key member1 member2..: 从右边插入
 *          eg: rpush l1 a b c d  --> a,b,c,d
 *      lrange key startindex endindex: 查看列表中指定索引间的数据 (0索引开始)
 *              -- lrange key 0 -1  -- 全查
 *   两端删除:
 *      lpop key: 左边弹出一个
 *      rpop key: 右边弹出一个
 * 4.集合类型(无序且不重复: 后面覆盖前面的)  (set)
 *     sadd key member1 member2... : 设置
 *     srem key member1 member2... : 删除
 *     smembers key: 查看所有元素
 * 5.有序集合类型(有序且唯一)  (zset)
 *     条件:必须要有一个数值来与之关联,因为要通过一个数值来排序 -- 相当于主键
 *     zadd key score1 value1 score2 value2...: 设置添加
 *     zrem key value1 value2.. : 删除指定成员
 *     zcard key: 展示元素长度
 *     zscore key value: 获取成员的数字
 *
 * redis 通用操作:
 *      1.keys * : 查询所有的 key
 *      2.exists key: 判断是否有指定的 key: 有则返回 1, 无则返回 0
 *      3.rename key 新key: 重命名key
 *      4.type key: 判断 指定 key 类型
 *      5.del key: 删除指定 key 及其所有数据
 * 多数据库操作(redis 默认提供了 db0 -- db15 共16个数据库)
 *      select 数据库编号: 切换库
 *      move key 目标数据库编号: 将当前库的指定 key 数据 移动到 目标数据库
 *      dbsize: 返回当前数据库有多少个 key
 *      flushdb: 清空当前库的所有数据
 *      flushall: 清空当前实例下所有数据库的数据
 * redis 的持久化 (了解)
 *   持久化: 就是将数据从内存保存到硬盘 -- 其他 nosql 数据库 都是关闭数据库服务器,则数据会从内存上销毁,不会保存到本地硬盘
 *   1. rdb (快照方式)
 *      默认开启的
 *          redis.windows.conf  -- 查 save
 *      保存策略: -- 在不定时将 更新的 key 保存到硬盘上 -- 时间的计算是从 key 改变到 服务关闭
 *          #   after 900 sec (15 min) if at least 1 key changed -- 如果15分钟后有 1 个 key 改变,则将数据保存到硬盘上 -- 15分钟之内改变的数据不会保存
 *          #   after 300 sec (5 min) if at least 10 keys changed -- 如果 5 分钟后 有 10 个 key 改变,则将数据保存到硬盘上
 *          #   after 60 sec if at least 10000 keys changed  -- 如果一分钟后有一万个 key 改变,则保存数据到硬盘
 *   2. aof(配置文件命令方式)
 *      默认不开启  redis.windows.conf  -- 查 appendonly
 *          appendonly no --> appendonlu yes
 *      保存策略:
 *          # appendfsync always  每次都写入
 *          # appendfsync everysec  每秒写入
 *          # appendfsync no  不写入
 *  Java 代码操作 redis 数据库数据(重点)
 *      java -- jdbc --mysql
 *      java -- jedis -- redis
 *      使用步骤:
 *       导包
 *       创建 jedis 对象
 *       通过 jedis 操作 redis 数据库
 *       释放资源
 *     使用连接池优化：
 *       //创建数据源的配置对象
 *       JedisPoolConfig config = new JedisPoolConfig();
 *       //配置初始化连接
 *       config.setMaxTotal(1000);
 *       //配置空闲时期的最大链接
 *       config.setMaxIdle(5);
 *       ...
 *       //创建一个连接池
 *       JedisPool pool = new JedisPool(config, "ip地址", 6379);
 *       //获取 jedis 对象
 *       Jedis jedis = pool.getResource();
 *
 */
public class RedisDemo {
}
