1. 秒杀商品上架: 数据存储到 MySQL 数据库
2. 查询 MySQL: 数据存储到 Redis
3. 用户浏览秒杀商品, 点击详情: 详情页 可以使用 静态页(模板引擎) 或者直接从 Redis 缓存加载
4. 用户点击 抢单: 验证用户是否登录 (CAS)
5. 登录成功后, 验证用户是否存在 未支付的秒杀订单
   检查当前商品排队人数是否已达上限
   检查当前商品是否还有库存
6. 验证通过, 登记排队, 创建秒杀信息队列, Redis 队列排队
7. 开启多线程, 从 Redis 中读取下单信息, 执行下单操作
8. 下单成功,将 订单信息写入 Redis 缓存, 清理 排队标识, 剩余库存-1
9. 用户查询 订单是否生成, 抢单成功, 支付
10. 支付成功, 将 Redis 缓存的订单查出, 写入 MySQL, 清理 Redis 缓存

另: 可能存在用户下单不支付的情况
在 7/8 步, 下单之后, 将 当前用户的订单信息写入 RabbitMQ,
  超时支付信息, 设置延时队列 (延时 30 分钟)
  后台程序监听, 30 分钟时间到, 去 Redis 缓存查询 有无之前的订单信息
  如果没有, 就去 MySQL 数据库查询, 如果数据库也没有, 说明 30 分钟内没有支付
  如果 Redis 中有订单而 MySQL 中没有订单, 也说明没有支付
 如果没有支付, 就将用户的排队信息, 商品信息, Redis 缓存等等 回滚

定时任务: 定时秒杀, 根据时间点去 MySQL 中查询
 1. 查询所有时间区间
 2. 循环时间区间, 查询每个时间区间的秒杀商品
 3. 构建查询条件: 审核通过, 库存大于 0,
     秒杀开始时间 >= 当前循环的时间区间的开始时间
     秒杀结束时间 < 当前循环的时间区间的开始时间 + 2 小时
 4. 判断 Redis 中是否已经存在对应时间区间的商品: 过滤掉已经存在的数据(判断 大 key 对应的 value 是否为 null)
 5. 执行 MySQL 查询
 5. 将秒杀商品存入到 Redis 缓存: 按时间区间设置 Redis 大 key (名称空间)

重复排队
超卖
数据不精准
雪崩
数据库和缓存同步
