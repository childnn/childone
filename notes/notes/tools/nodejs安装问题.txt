mongodb安装问题解决方案：
	步骤一：先安装mongodb.exe
	步骤二：配置mongodb 的环境变量
		MONGO_HOME   C:\Program Files\MongoDB\Server\4.0\bin （注意：安装路径）
		在path中添加 %MONGO_HOME%
	步骤三：打开新的dos窗口，输入命令：.\mongod --dbpath="E:\MongoDB\data" （注意：安装路径）


nodejs: 
安装后,cmd 输入 $ node -v 显示版本信息, 说明 nodejs 安装成功.
           输入 $ npm -v 显示版本信息, 说明 npm 安装成功.
		   输入 $ node 进入 node.js 交互界面
		     -- 可以直接输入/运行 js 代码. (eg: console.log('hello, node.js'); )
		     -- 或者运行 指定的 js 文件(就像 执行命令 $ java HelloWord 一样)
		        (eg: $ node hello.js // 必须以 .js 结尾)
		   node 交互模式, 相当于启动了 Node 解释器, 等待你一行一行的输入源代码, 每输入一行执行一行.
		   运行 $ node 文件名.js 相当于启动了 Node 解释器, 然后一次性把 文件的源码执行了.

  关于使用严格的 js 语法:
    1. 在 js 文件开头标注: 'use strict'
    2. node 命令: $ node --use_strict 文件名.js
		  
-- 关于 npm
  node.js package manager  node.js 的管理工具包.
  
  在 node.js 上开发时, 会用到很多别人写的 js 代码. 如果我们要使用别人写的
  某个包, 每次都根据名称搜索官网, 下载代码,解压,再使用, 非常繁琐.
  于是一个集中管理的工具应运而生: 大家都把自己开发的模块打包后放到 npm 官网上,
  如果要使用, 直接通过 npm 安装就可以直接用, 不用管代码存在哪, 应该从哪下载.
  更重要的是, 如果我们要使用模块 A, 而模块 A 又依赖模块 B, 模块 B 又依赖于
  模块 X 和 模块 Y, npm 可以根据依赖关系, 把所有依赖的包下载下来并管理起来.
  -- js 代码是在浏览器中运行的, 可以直接在浏览器中敲代码, 然后运行.
  在使用 Node.js 后, js 代码不能在浏览器环境中执行了, 而是在 Node 环境中执行.
  因此, js 代码将直接在你的计算机上以命令行的方式运行.

---
在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。
为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，
很多编程语言都采用这种组织代码的方式。在Node环境中，一个.js文件就称之为一个模块（module）。


  

1、vue.js 嵌入在html中使用步骤
	步骤一：引入vue.js包
	步骤二：声明dom元素，可以被选择
	步骤三：创建Vue对象，去渲染dom元素

2、node.js 环境变量
	步骤一：找到自己 node.js 的安装目录
	步骤二：新建 NODE_HOME 环境变量
	步骤三：把步骤二中的NODE_HOME放在path

3、cnpm、webpac 离线安装
	步骤一：在node.js 的安装目录下“C:\Program Files\nodejs”，创建npm_modules和npm_cache文件夹；
	步骤二：设置npm 的配置文件路径
		npm config set prefix "C:\Program Files\nodejs\npm_modules"
		npm config set cache "c:\Program Files\nodejs\npm_cache"
	步骤三：解压npm_modules.zip文件。并放置在node.js 的安装目录下“C:\Program Files\nodejs\npm_modules”
	步骤四：修改环境变量
		%NODE_HOME%;%NODE_HOME%\npm_modules;
		
4、安装webpack
	借用3、cnpm 离线安装，可以直接查看webpack 命令
	
	
	
5、通过脚手架工具（vue-cli）,创建前端 vue 工程


----------------------------------------------------------------
vue.js: MVVM 框架 (读作: view.js)
    M: model: 负责数据存储
    V: view: 负责页面展示
    VM: View Model: 负责业务逻辑处理(比如 ajax 请求等), 对数据进行加工后交给视图展示 -- 连接 model 和 view (DOM Listeners/Directives)
    将业务逻辑代码与视图代码完全分离, 使各自的职责更加清晰, 后期代码更加简单.
指令:
  v-model="变量名" # 绑定变量: <input type="text" v-model="num1"/>
      只能在 input, select, textarea, components(vue组件中) 使用
  v-text="变量名" # 弥补 {{变量名}} 插值表达式 直接展示结果的 "闪烁" 问题: <span v-text="result"></span>
  v-on:click="方法名" # 调用方法: <button v-on:click="method">点我</button>
      # 简写形式  @click="方法名"   用 @ 替代 v-on:
  v-bind:属性名="属性值" # <img v-bind:src="imageSrc"/> <div v-bind:style="{fontSize: size + 'px'}"></div>
      # 缩写形式: <img :src="imageSrc"/> <div :style="{fontSize: size + 'px'}"></div>
      # a 标签: <a v-bind:href="url"/>
  v-for/v-if
     # 只显示偶数行
    <li v-for="(item, index) in list" :key="index" v-if="index % 2 == 0">

webpack:
  1. 安装 node.js
  2. 安装 npm: node package manager,  node.js 使用 npm 安装所依赖的 js 包
  3. 通过 npm 安装 webpack
    npm 工作原理: 去远程下载所依赖的包
  4. cnpm 替代 npm, 可以从国内镜像下载 js 包
	
	
	
	
	
	

