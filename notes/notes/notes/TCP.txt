TCP: 可靠. 网络要求高,速度慢
UDP: 不可靠. 速度快.
RUDP: Reliable UDP. 既保证可靠性,又保证实时性. 常见 RUDP 协议右 QUIC, WebRTC, Aeron 等.

QUIC: Quick UDP Internet Connection. Google 公司提出的基于 UDP 的高效可靠协议, 和 HTTP 一样是应用层协议.
    高效: 基于 UDP
    可靠: 模仿 TCP 的可靠性.
 特性:
  RTT: Round-Trip Time. 往返时延. QUIC 可以在第一次发送的时候就带上数据.

IP 的不可靠与无连接
 不可靠: unreliable, 指它不能保证 IP 数据报能成功地到达目的地. IP 仅提供最好地传输服务. 如果发生某种错误时,
  如某个路由器暂时用完了缓冲区, IP 有一个简单的错误处理算法: 丢弃该数据报, 然后发送 ICMP 消息给信源端. 任何要求的可靠性必须
  由上层来提供(如 TCP).
 无连接: connectionless, 指 IP 并不维护任何关于后续数据报的状态信息. 每个数据报的处理是相互独立的. 这也说明, IP 数据报
  可以不按发送顺序接收. 如果一信源向相同的信宿发送两个连续的数据报, 每个数据报都是独立地进行路由选择, 可能选择不同的路线,
  因此后发送的可能先到达.
IP 数据报首部 20 字节: 不含选项字段
 4 位: 版本
 4 位: 首部长度
 8 位: 服务类型 TOS, type of service
 16 位: 总长度(字节数), IP 数据报最长可达 65535 字节(理论上, 实际会被链路层分片).
 16 位: 标识, 通常每发送一份报文其值就会加 1
 3 位: 标志
 13 位: 片偏移
 8 位: 生存时间 TTL, time to live, 设置数据报可以经过的最多路由器数. TTL 初始值由源主机设置(通常为32或64), 一旦经过一个处理它的路由器,
       它的值就减一. 当该字段值的为 0 时, 数据报被丢弃, 并发送 ICMP 报文通知源主机.
 8 位: 协议, 识别是哪个协议向 IP 传送数据.
 16 位: 首部检验和. 根据 IP 首部计算的检验和码, 它不对首部后面的数据进行计算. ICMP/IGMP/UDP/TCP 在它们各自的首部中均含有同时覆盖首部和数据检验和码.
        为了计算一份数据报的 IP 检验和, 首先把检验和字段置为 0. 然后, 对首部中每个 16bit 进行二进制反码求和(整个首部看成是由一串 16 bit 字组成),
        结果存在检验和字段中. 当收到一份 IP 数据报后, 同样对首部中每个 16 bit 进行二进制反码的求和. 由于接收方在计算过程中包含了发送方存在首部中
        的检验和, 因此, 如果首部在传输过程中没有发生任何差错, 那么接收计算的结果应该为全 1. 如果结果不是全 1(即检验和错误), 那么 IP 就丢弃收到的
        数据报. 但是不生成差错报文, 由上层去发现丢失的数据报并进行重传.
        ICMP/IGMP/UDP/TCP 都采用相同的检验和算法, 尽管 TCP/UDP 除了本身的首部和数据外, 在 IP 首部中还包含不同的字段.
 32 位: 源 IP 地址
 32 位: 目的 IP 地址
以上在 IP 首部按固定的先后顺序排列, 共 20 字节. 以 big-endian 字节序排列(最高位在左边, 0 bit, 最低为在右边),
由于 TCP/IP 首部中所有的二进制整数在网络中传输时都要求以这种次数, 因此它又称为网络字节序. 以其他形式存储的二进制整数的机器,
如, little endian 格式, 则必须在传输数据之前把首部转换成网络字节序.
IP 数据报其他部分:
  选项: 可选, 不一定有. 这些选项很少使用, 并非所有的主机和路由器都支持这些选项.
        选项字段一直都以 32 bit 作为界限, 在必要的时候插入值为 0 的填充字节. 这样就保证 IP 首部始终是 32 bit 的整数倍(这是首部长度字段所要求的).
  数据: ...
---
IP 路由选择
  IP 层既可以配置成路由器的功能, 也可以配置成主机的功能. 当今的大多数用户系统, 包括几乎所有的 Unix 系统, 都可以配置称一个路由器. 我们可以为它
  指定主机和路由器都可以使用的简单路由算法. 本质上的区别在于主机从不把数据报从一个接口转发到另一个接口, 而路由器则要转发数据报. 内含路由器功能的
  主机应该从不转发数据报, 除非它被设置成那样.
路由表的每一项都包含下面这些信息:
  1. 目的 IP 地址: 它既可以是一个完整的主机地址, 也可以是一个网络地址, 由该表目中的标志字段来指定. 主机地址有一个非 0 的主机号, 以指定某一特定的主机,
    而网络地址中的主机号为 0, 以指定网络中的所有主机(如以太网, 令牌环网).
  2. 下一站(下一跳)路由器(next-hop router)的 IP 地址, 或者有直接连接的网络 IP 地址. 下一站路由器是指一个在直接相连网络上的路由器, 通过它可以转发数据报.
    下一站路由器不是最终的目的, 但是它可以把传送给它的数据报转发到最终目的.
  3. 标志: 其中一个标志指明目的 IP 地址是网络地址还是主机地址, 另一个标志指明下一站路由器是否为真正的下一站路由器, 还是一个相连的接口.
  4. 为数据报的传输指定一个网络接口.
IP 路由器是 逐跳地(hop-by-hop)进行的. 从这个路由表信息可以看出, IP 并不知道到达任何目的的完整路径(当然, 除了那些与主机直接相连的目的).
所有的 IP 路由选择只为数据报传输提供下一站路由器的 IP 地址. 它假定下一站路由器比发送数据报的主机更接近目的, 而且下一站路由器与该主机是直接相连的.
IP 路由选择主要完成一下功能:
  1. 搜索路由表, 寻找能与目的 IP 地址完全匹配的表目(网络号和主机号都要匹配). 如果找到, 则把报文发送给该表目指定的下一站路由器或直接连接的网络接口
     (取决于标志字段的值).
  2. 搜索路由表, 寻找能与目的网络号相匹配的表目. 如果找到, 则把报文发送给该表目指定的下一站路由器或直接连接的网络接口(取决于标志字段的值).
     目的网络上的所有主机可以通过这个表目来处理. 例如, 一个以太网上的所有主机都是通过这种表目进行寻径的.
     这种搜索网络的匹配方法必须考虑可能的子网掩码.
  3. 搜索路由表, 寻找标为 "默认(default)" 的表目. 如果找到, 则把报文发送给该表目指定的下一站路由器.
  如果上述步骤都未成功, 那么该数据报就不能被传送. 如果不能传送的数据报来自本机, 那么一般会向生成数据报的应用程序返回一个 "主机不可达" 或
  "网络不可达" 的错误.
IP 数据报中的目的IP地址始终不变, 所有的路由选择决策都是基于这个目的IP地址.
每个链路层可能具有不同的数据帧首部, 而且链路层的目的地址(如果有的话)始终指的是下一站链路层地址(也称以太网地址注意区别于实际的目的IP地址),
但是 SLIP 链路不会加链路层. 以太网地址一般通过 ARP 获得.
---
子网寻址
 现在所有的主机都要求支持子网编址. 不是把 IP 地址看成由单纯的一个网络号和一个主机号组成, 而是把主机号再分成一个子网号和一个主机号.
 这样做的原因是 A类和 B类地址为主机号分配了太多的空间, 可分别容纳的主机数为 2^24-2 和 2^16-2. 事实上, 在一个网络中人们并不安排这么多
 的主机. 由于全 0 或全 1 的主机号都是无效的, 因此把总数减去 2.
子网掩码
 任何主机在引导时进行的部分配置是指定主机 IP 地址. 大多数系统把 IP 地址存在一个磁盘文件里供引导时使用.
 除了 IP 地址以外, 主机还需要知道有多少比特用于子网号及多少比特用于主机号. 这是在引导过程中通过子网掩码来确定的. 这个掩码是一个 32 bit 的值,
 其中值为 1 的比特留给网络号和子网号, 为 0 的比特留给主机号.
---
ARP: 地址解析协议
示例: 任何时候敲入命令 $ ftp xxx.xxx.xxx
   1) 应用程序 FTP 客户端调用函数 gethostbyname(name) 把主机名转换成 32bit 的 IP 地址.
      这个函数在 DNS 中称为解析器, 这个转换过程或者使用 DNS, 或者在较小网络中使用一个静态的主机文件(/ect/hosts).
   2) FTP 客户端请求 TCP 用得到的 IP 地址建立连接.
   3) TCP 发送一个连接请求分段到远端的主机, 即用上述 IP 地址发送一份 IP 数据报.
   4) 如果目的主机在本地网络上(如以太网, 令牌环网或点对点链接的另一端), 那么 IP 数据报可以直接送到目的主机上. 如果目的主机在一个远程网络上,
      那么就通过 IP 选路函数来确定位于本地网络上的下一站路由器地址, 并让它转发 IP 数据报. 在这两种情况下, IP 数据报都是
      被送到位于本地网络上的一台主机或路由器.
   5) 假定是一个以太网, 那么发送端主机必须把 32bit 的 IP 地址变换成 48 bit 的以太网地址.
      从逻辑 Internet 地址到对应的物理硬件地址需要进行翻译. 这就是 ARP 的功能.
      ARP 本来是用于广播网络的, 有许多主机或路由器连在同一个网络上.
   6) ARP 发送一份称作 ARP 请求的以太网数据帧给以太网上的每个主机. 这个过程称作广播. ARP 请求数据帧中包含目的主机的 IP 地址,
      其意思是: 如果你是这个 IP 地址的拥有者, 请回答你的硬件地址.
   7) 目的主机的 ARP 层收到这份广播报文后, 识别出这是发送端在询问它的 IP 地址, 于是发送一个 ARP 应答. 这个 ARP 应答包含 IP 地址
      及对应的硬件地址.
   8) 收到 ARP 应答后, 使 ARP 进行请求-应答交换的 IP 数据报现在就可以传送了.
   9) 发送 IP 数据报到目的主机.
 在 ARP 背后有一个基本概念, 那就是网络接口有一个硬件地址(一个 48bit 的值, 标识不同的以太网或令牌环网接口). 在硬件层次上进行的数据帧交换
 必须有正确的接口地址. 但是, TCP/IP 有自己的地址: 32bit 的 IP 地址. 知道主机的 IP 地址并不能让内核发送一帧数据给主机.
 内核(如以太网驱动程序)必须知道目的端硬件地址才能发送数据. ARP 的功能是在 32 bit 的 IP 地址和采用不同的网络技术的硬件地址之间提供动态映射.
ARP 高速缓存:
  ARP 高效运行的关键是由于每个主机上都有一个 APR 高速缓存. 这个高速缓存存放了最近 Internet 地址到硬件地址之间的映射记录. 高速缓存中每一项的
  生存时间一般为 20min, 起始时间从被创建时开始算起.
---
ICMP: Internet 控制报文协议, Internet Control Message Protocol
  ICMP 经常被认为是 IP 层的一个组成部分. 它传递差错报文以及其他需要注意的信息. ICMP 报文通常被 IP 层或更高层协议(TCP/UDP)使用.
  一些 ICMP 报文把差错报文返回给用户进程. ICMP 报文是在 IP 数据报内部被传输的.
---
Ping 程序
  "ping" 这个名字源于声纳定位操作. Ping 程序有 Mike Muuss 编写, 目的是为了测试另一台是否可达. 该程序发送一份 ICMP 回显请求报文给主机,
  并等待返回 ICMP 回显应答. 一般来说, 如果不能 Ping 到某台主机, 那么就不能 Telnet 或者 FTP 到那台主机. 返回过, 如果不能 Telnet 到某台主机,
  那么通常可以用 Ping 程序来确定问题出在哪里. Ping 程序还能测出到这台主机的往返时间, 以表明该主机离我们有 "多远".
  随着 Internet 安全意识的增强, 出现了提供访问控制清单的路由器和防火墙, 那么像这样没有限定的断言就不再成立. 一台主机的可达性可能不只取决于 IP 层
  是否可达, 还取决于使用何种协议以及端口号. Ping 程序的运行结果可能显示某台主机不可达, 但我们可以用 Telnet 远程登陆到该台主机的 25 号端口(邮件服务器).
我们称发送回显请求的 ping 程序为客户, 而称被 ping 的主机为服务器. 大多数 TCP/IP 实现都在内核中直接支持 Ping 服务器 -- 这种服务器不是一个用户进程.

---
运行环境 = 操作系统 + 硬件
本地代码与源代码: native code/source code
程序员用 C 语言等编写的程序, 在编写阶段仅仅是文本文件. 文本文件(排除文字编码问题)在任何环境下都能显示和编辑,
此即为 源代码; 通过对源代码进行编译, 就可以得到本地代码.






