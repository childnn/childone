消息中间件: 异步, 解耦, 削峰填谷, 日志处理
消息服务两个概念:
    消息代理(message broker): 消息服务器
    目的地(destination): 消息接收者
  当消息发送者发送消息后,将由消息代理接管,消息代理保证消息传递到指定目的地.
消息队列主要有两种形式的目的地:
   队列(queue): 点对点消息通信(point-to-point)
   主题(topic): 发布(publish)/订阅(subscribe) 消息通信
点对点式:
   消息发送者发送消息,消息代理将其放入一个队列中,消息接收者从队列中获取消息内容,消息读取后被移出队列.
   消息只有唯一的发送者和接受者,但并不是说只能由一个接收者.
   (多个消息 接收者 可以同时监听一个 消息, 但是最终只会有一个 接收者 接收到消息, 即消息的最终接受者)
发布订阅式:
   发送者(发布者)发送消息到主题,多个接收者(订阅者)监听(订阅)这个主题,
   那么就会在消息到达时同时收到消息.
JMS(java message service):
   基于 jvm 消息代理的规范. activeMQ, HornetMQ 是 jms 实现
AMQP(advanced message queuing protocol)
   高级消息队列协议, 也是一个消息代理的规范, 兼容 jms
   RabbitMQ 是 AMQP 的实现.

主流的 IM(即时通信) 协议有四种:
  即时消息和存在协议(Instant Messaging and Presence Protocol, IMPP),
  存在和即时消息协议(Presence and Instant Messaging Protocol, PRIM),
  SIP 即时消息和存在扩展协议(SIP for Instant Messaging and Presence Leveraging Extensions, SIMPLE),
  可扩展消息与存在协议(Extensible Messaging and Presence Protocol, XMPP).
IM 只支持 一对一通信, 而 AMQP 消息支持 一对多的广播方式进行路由, 也可以选择一对一的方式路由.

消息包括两部分内容:
    1. 有效荷载(payload): 想要传输的数据.
       -- 它可以是任何内容, 一个 JSON 数组或者是 iguana Ziggy 的 MPEG-4.
    2. 标签(label): 描述有效荷载. RabbitMQ 用它来决定谁将获得消息的拷贝.
       -- 不同于 TCP 协议, 当你明确指定发送方和接收方时, AMQP 只会用标签表述这条消息
       (一个交换器的名称和可选的主题标记), 然后把消息交由 Rabbit. Rabbit 会根据标签把消息发送给
       感兴趣的接收方. 这种通信方式是一种 "发后即忘"(fire-and-forget) 的单向方式.
    当消费者接收到消息时, 它只得到消息的一部分: 有效荷载. 在消息路由过程中, 消息的标签并没有随有效荷载一同传递.
    RabbitMQ 甚至不会告诉你是谁生产/发送了消息. 就好比你拿起信件时, 却发现所有的信封都是空白的. 想要知道
    这条消息是否是从 Millie 姑妈发来的唯一方式是她在信里签了名. 同理, 如果需要明确知道是谁生产的 AMQP 消息的话,
    就要看生产者是否把发送方信息放入有效荷载中.
---
    整个过程其实很简单: 生产者创建消息, 消费者接收这些消息. 你的应用程序可以作为 生产者, 向其他应用程序发送消息.
    或者作为一个消费者, 接收消息. 也可以在两者之间进行交换. 不过在此之前, 它必须先建立一条 信道(channel).
    你必须先连接到 Rabbit, 才能消费或发布消息. 你在应用程序和 Rabbit 代理服务器之间创建一条 TCP 连接.
    一旦 TCP 连接打开(你通过了认证), 应用程序就可以创建一条 AMQP 信道. 信道 是建立在 "真实的" TCP 连接内的虚拟连接.
    AMQP 命令都是通过信道发送出去的. 每条信道都会被指派一个唯一 ID (AMQP 库会帮你记住 ID).
    不论是发布消息、订阅队列或是接收消息, 这些动作都是通过信道完成的.
    一条 TCP 连接上创建多少条信道是没有限制的. 相当于 一条电缆中的许多束光纤.
    RabbitMQ 可以看作是 软件的路由器.
---
队列:
  -- AMQP 消息路由必须有三部分: 交换机(exchanges)、队列(queues)和绑定(bindings).
    publisher 把消息发布到 exchange 上, 消息最终到达 queue, 并被 consumer 接收
    (a consumer pulls messages from a queue (or the queue pushes them to the consumer depending on the configuration)),
    binding 决定了消息如何从路由器路由到特定的队列.
    当你想要将消息投递到队列时, 你通过把消息发送给交换器来完成. 然后, 根据确定的规则, RabbitMQ 将会决定消息
    该投递到哪个队列. 这些规则被称作 路由键(routing key). 队列通过 路由键 绑定到 交换器. 当你把消息发送到代理服务器时,
    消息将拥有一个路由键--即便是空的--RabbitMQ 也会将其和绑定使用的路由建进行匹配. 如果相匹配的话, 那么消息将会
    投递到该队列. 如果路由的消息不匹配任何绑定模式的话, 消息将进入 "黑洞".
    how do publishers and consumers discover each other?
        Via the name of the exchange. Usually, either the publisher or consumer creates the exchange with a given name and then makes that name public.
    How are the messages routed from the exchange to the queue?
        Good question. First, the queue has to be attached to the given exchange.  队列关联到交换器上.
        Typically, a consumer creates a queue and attaches it to an exchange at the same time. 消费者创建队列并将其关联到交换器上.
        Second, messages received by the exchange have to be matched to the queue - a process called "binding".
           -- 被交换器接收的消息需要与队列匹配--此过程被称为 绑定.
        To understand binding, it's useful to understand the structure of an AMQP message:
            -- Headers
            -- Properties
            -- byte[] data
         The headers and properties of the message are basically key/value pairs.
         The difference between them is that headers are defined by the AMQP specification whereas properties can contain arbitrary,
         application-specific information. The actual message content is just a sequence of bytes,
         so if you want to pass text around in your messages, then you should standardise on an encoding. UTF-8 is a good bet.
         You can specify a content type and encoding in the message headers if you want, but that's apparently not particularly common.
         What does this have to do with binding?
         One of the standard headers is called 'routing-key' and it is this that the broker uses to match messages to queues.
         Each queue specifies a "binding key" and if that key matches the value of the 'routing-key' header, the queue receives the message.


四种交换器: exchange behaviour type
   1. direct -- the binding key must match the routing key exactly - no wildcard support.
        (一对一(指定 队列名): binding key 与 routing key 完全匹配): 包含一个 空白字符串 名称的 默认交换器. 当声明一个队列时, 它会自动绑定到默认交换器, 并以队列名称作为 路由键.
        这意味着你可以使用如下代码发送消息到之前声明的队列去. 前提是你已经获得了信道实例:
        $channel -> basic_publish($msg, '', 'queue-name');
        参数一: 想要发送的消息内容;
        参数二: 空字符串, 指定默认交换器;
        参数三: 路由键--就是之前用来声明队列的名称.
   2. fanout -- the routing and binding keys are ignored - all published messages go to all bound queues.
        广播(一对多: 一个生产者可以对应多个消费者). 当你发送一条消息到 fanout 交换器时, 它会把消息投递给所有附加在此交换器上的队列.
        这允许你对单条消息做不同方式的反应.
        它会把发送到该 Exchange 的消息路由到所有与它绑定的 Queue 中. -- 无视 binding key.
        举例来说, 一个 web 应用程序可能需要在用户上穿新的图片时, 用户相册必须清除缓存, 同时用户应该得到些积分奖励. 你可以将两个队列
        绑定到 图片上传交换器 上. 一个用于 清除缓存, 另一个用于增加用户积分. 从这个场景中你可以了解到, 使用交换器、绑定和队列
        比直接向指定的队列发送消息要有优势.
        假设应用程序的第一个需求是在图片上传到网站上后, 需要清除用户相册缓存. 你可以通过只使用一个队列就能轻易完成.
        但是当产品负责人让你实现一个新功能, 即在上传完成后给用户一点奖励, 你该怎么办呢?
        如果你是直接将消息发送给队列的话, 就不得不修改发送方的代码, 以将消息发送给新的用户积分(points) 队列.
        如果你使用的是 fanout 交换器的话, 你唯一需要做的就是为新的消费者写一段代码, 然后声明新的队列并将其绑定到 fanout 交换器上.
        就如同之前讲的, 发送方的代码和消费者的代码两者之间完全解耦了, 这允许你轻而易举地添加应用程序地功能.
   3. topic -- same as direct, but wildcards are allowed in the binding key.
        '#' matches zero or more dot-delimited words and '*' matches exactly one such word.
        主题模式 (多对多: 通配符匹配).
        示例: web 应用程序日期系统. 拥有多个不同地日志级别, error,info,warning 等. 与此同时, 你的应用程序分为以下几个模块:
        user-profile, image-gallery, msg-inbox 等. 如果在发送消息的动作失败时, 你想要报告一个 error 的话, 则可以编写以下代码:
        $channel -> basic_publish($msg, 'logs-exchange', 'error.msg-inbox');
        然后, 假设你声明了一个 msg-inbox-errors 队列, 你可以将其绑定到交换器上来接收消息.
        $channel -> queue_bind('msg-inbox-errors', 'logs-exchange', 'error.msg-inbox');
        到目前为止, 这看起来和使用 direct 交换器很像. 你为队列绑定操作和消息发布路由键制定了相同的 error.msg-inbox 字符串作为绑定规则.
        那样就能确保你的消息会路由到 msg-inbox-errors 队列, 这没什么特别的. 但是如果你想要一个队列监听 msg-inbox 模块的所有日志级别的话,
        你可以通过将新的队列绑定到已有的同一个交换机来实现. 如下:
        $channel -> queue_bind('msg-inbox-logs', 'logs-exchange', '*.msg-inbox');
        msg-inbox-logs 队列将会接收从 msg-inbox 模块发来的所有级别的日志.
        那么如何接收所有的日志呢? 这实现起来也很简单. 你可以在队列绑定到交换器上的时候使用 通配符. 从之前的例子可以看到, 单个 "."
        把路由键分成了及部分, "*" 匹配特定位置的任意文本. 为了实现匹配所有规则, 可以使用 "#" 字符:
        $channel -> queue_bind('all-logs', 'logs-exchange', '#');
        通过这样的绑定方式, all-logs 队列将会接收所有从 web 应用程序发布的日志.
        当然, 要使得之前的示例能够运行, 你必须在绑定之前对队列进行声明. "*" 操作符将 "." 视为分隔符; 与之不同的是, "#" 操作符没有
        分块的概念, 它将任意 "." 字符均视为关键字的匹配部分.
        "*" 匹配一个单词, "#" 匹配多个单词(可以是零个)
        For example, say a publisher sends a message with a routing key of "NYSE" to a topic exchange called "Stocks".
        If a consumer creates a queue attached to "Stocks" with a binding key of "#", "*", or "NYSE",
        then that consumer will get the message because all three binding keys match "NYSE". However,
        if the message is published to a direct exchange, then the consumer will not get the message if the binding key is "#" or "*"
        since those characters are treated as literals, not wildcards.
        Interestingly, "#.#" will also match "NYSE" despite the routing key not having a dot.
        Now consider a message with a routing key of "NYSE.TECH.MSFT". What binding keys will match it given that the message
           is going to a topic exchange?
        Binding key                     Match?
        NYSE.TECH.MSFT                   YES
            #                            YES
        NYSE.#                           YES
          *.*                            NO
          NYSE.*                         NO
          NYSE.TECH.*                    YES
          NYSE.*.MSFT                    YES

   4. headers: 允许你匹配 AMQP 消息的 header 而非路由键, 除此之外, headers 交换器和 direct 交换器完全一致,
      但性能会差很多. 因此不太使用, 而且几乎再也用不到了.

两种场景:
    1. 一个交换器绑定多个队列, 每个队列绑定一个消费者; -- 日志的各个级别的记录.
    2. 一个交换器绑定一个队列, 此队列绑定多个消费者. -- 只要消息被消费, 不管消费者是谁(分布式).

---
exclusive: 如果设置为 true 的话, 队列将变成私有的, 此时只有你的应用程序才能消费队列消息. 当你想要限制一个队列只有一个消费者的时候很有帮助.
auto-delete: 当最后一个消费者取消订阅的时候, 队列就会自动删除. 如果你需要临时队列只为一个消费者服务的话, 请结合使用 auto-delete 和 exclusive.
        当消费者断开连接时, 队列就被移除了.
---
vhost:
   1. 创建 vhost.
     $ ./sbin/rabbitmqctl add_vhost [vhost_name]
   2. 删除 vhost.
     $ rabbitmqctl delete_vhost [host_name]
   一旦 vhost 创建成功之后, 就可以连接上去并开始添加队列和交换器了.
   3. 查看当前 Rabbit 服务器上运行着哪些 vhost.
      $ rabbitmqctl list_vhosts
  注: 通常, 你将在服务器上直接运行 rabbitmqctl 来管理自己的 RabbitMQ 节点. 不过, 你也可以通过指定
     -n rabbit@[server_name] 选项来管理远程 RabbitMQ 节点. @ 符号将节点标识符(rabbit@[server_name])
     分成两部分: 左边是 Erlang 应用程序名称, 在这里永远都是 rabbit. 右边是服务器主机名或者 IP 地址.
     你需要确保运行 Rabbit 节点的服务器和运行 rabbitmqctl 的工作站安装了相同的 Erlang cookie.
消息持久化:
   能从 AMQP 服务器崩溃中恢复的消息, 称为 持久化消息.
   在消息发布前, 通过把它的 "投递模式"(delivery mode) 选项设置为 2(AMQP 客户端可能会使用人性化的常量来代替数值)
   来把消息标记成持久化. 到目前为止, 消息还只是被表示为持久化的, 但是他还必须被发布到持久化的交换器中并到达持久化
   的队列中才行. 如果不是这样的话, 则包含持久化消息的队列(或者交换器) 会在 Rabbit 崩溃重启后不复存在, 从而导致
   消息成为 孤儿. 因此, 如果消息想要从 Rabbit 崩溃中恢复, 那么消息必须:
   -- 把它的投递模式选项设置为 2 (持久);
   -- 发送到持久化的交换器;
   -- 到达持久化的队列.
   RabbitMQ 确保持久性消息能从服务器重启中恢复的方式是, 将它们写入磁盘上的一个持久化日志文件. 当发布一条持久性消息
   到持久交换器上时, Rabbit 会在消息提交到日志文件后才发送响应. 记住, 之后这条消息如果路由到了 非持久队列的话,
   它会自动从 持久性日志 中移除, 并且无法从服务器重启中恢复. 如果你使用持久性消息的话, 则确保之前提到的持久性消息的
   那三点都必须做到位. 一旦你从 持久化队列 中消费了一条持久性消息(并且确认了它)的话, RabbitMQ 会在持久化日志中把这条消息
   标记为等待垃圾收集. 在你消费持久性消息前, 如果 RabbitMQ 重启的话, 服务器会自动重建交换器和队列(以及绑定), 重播持久性
   日志文件中的消息到合适的队列或者交换器上(取决于 Rabbit 服务器宕机的时候, 消息处在路由过程的哪个环节).
   注意:
     1. 使用 持久化机制 会导致消息吞吐量降低至少 10 倍.
     2. 持久性消息 在 RabbitMQ 内建集群环境下工作得并不好.
---
事务(transaction)与 发送方确认模式(publisher confirm):
    由于发布操作不返回任何信息给生产者, 那么你怎么知道服务器是否已经持久化了持久信息到硬盘呢? 服务可能会在
    把消息写入磁盘前就宕机了, 消息因此而丢失, 而你却不知道. 这就是事务发挥作用得地方. 当继续处理其他任务前,
    你必须确保代理接收到了消息(并且已经将消息路由给所有匹配得订阅队列), 你需要把这些行为包装到一个事务中.
    不要把 AMQP 事务和 大多数数据库得事务概念搞混了. 在 AMQP 中, 在把信道设置成事务模式后, 你通过信道发送
    那些想要确认的消息, 之后还有多个其他 AMQP 命令. 这些命令是 执行还是忽略, 取决于第一条消息发送是否成功.
    一旦你发送完所有命令, 就可以提交事务了. 如果事务中的首次发布成功了, 那么信道会在事务中完成其他 AMQP 命令.
    如果发送失败的话, 其他 AMQP 命令将不会执行. 事务填补了生产者发布消息以及 RabbitMQ 将它们提交到磁盘上
    这两者之间 "最后 1 英里" 的差距. 不过还有更好的方式.
    虽然事务是正式 AMQP 0-9-1 规范的一部分, 但是它们有 阿喀琉斯之踵: 几乎耗光了 Rabbit 的性能. 使用事务不但会
    降低大约 2~19 倍的消息吞吐量, 而且会使生产者应用程序产生同步. 而你使用消息通信就是想避免同步.
    知晓这一切之后, RabbitMQ 团队决定拿出更好的方案来保证消息投递: 发送方确认模式. RabbitMQ 2.3.1+ 版本可用.
    和事务相仿, 你需要告诉 Rabbit 将信道设置成 confirm 模式, 而且你只能通过重新创建信道来关闭该设置. 一旦信道
    进入 confirm 模式, 所有在信道上发布的消息都会被指派一个唯一的 ID 号(从 1 开始). 一旦消息被投递给所有匹配
    的队列后, 那么确认消息只会在队列将消息写入磁盘后才会发出. 发送方确认模式的最大好处是它们是异步的. 一旦发布了一条
    消息, 生产者应用程序就可以在等待确认的同时继续发送下一条. 当确认消息最终收到的时候, 生产者应用的回调方法就会被
    触发来处理该确认消息. 如果 Rabbit 发生了内部错误从而导致了消息的丢失, Rabbit 会发送一条 nack (not acknowledged, 未确认)
    消息. 就像发送方确认消息那样, 只不过这次说明的是消息已经丢失了. 同时, 由于没有消息回滚的概念(同事务相比), 因此发送方确认模式
    更加轻量级, 同时对 Rabbit 代理服务器的性能影响几乎可以忽略不计.

