/**
 * @author child
 * 2019/5/7 9:01
 *
 *   关于减少代码冲突的几个基本原则：(代码冲突无法避免, 只能尽量减少)
 *    1. 每次修改代码之前, 必须从远程仓库 pull/clone 拉取/克隆 最新代码
 *    2. 修改完代码之后, 必须及时 add -> commit -> push 最新修改的代码
 *    3. 各自开发各自的模块, 如果需要修改公共代码, 必须事先确认有没有人正在修改
 *    4. 不要擅自修改同事的代码.

 * !$    # 该命令自动补全上一次执行命令的余下部分
 -----------------------------------------------------------------------------
 * git 中的一些选项
     -d
     --delete   # 删除
     -D
     --delete --force
     -f
     --force
     -m
     --move  # 移动或重命名
     -M
     --move --force
     -r
     --remote
     -a
     --all
 ------------------------------------------------------------------------------
 *
 * git： 分布式版本控制工具
 *  一般工作流程：
 *   1. 从远程仓库中 clone git 资源作为本地仓库
 *   2. 从本地仓库中 checkout 代码然后进行代码修改
 *   3. 在提交前先将代码提交到暂存区
 *   4. 提交修改. 提交到本地仓库. 本地仓库中保存修改的各个历史版本.
 *   5. 在修改完成后, 需要和团队成员共享代码时,可以将代码 push 到远程仓库
 *   命令:
 *      ssh-keygen: 在桌面运行 bush, 生成 ssh 密钥
 *          -- 该命令在 C:/Users/child/.ssh 生成 id_rsa 文件(私钥)和 id_rsa.pub 文件(公钥)
 *             1. 打开 id_rsa.pub 文件(其中就是 ssh 密钥): 用该 ssh 密钥可以将本地仓库与 github 建立联系
 *             2. 访问 github -> 点击 settings(网页右上角) -> 选择 SSH and GPG keys 目录, -> 添加 SSH keys (就是 id_rsa.pub 文件中的所有 信息)
 *
 *      git init: 在 git 仓库目录运行 bush
 *          -- 该命令运行完毕, 会在 本地仓库的目录(就是该命令运行的目录)生成一个文件夹: .git (如果隐藏了可以设置显示)
 *       再输入命令  git remote add origin https://github.com/childnn/child0.git(github仓库的地址)
 *         -- 这个命令就表示 当前窗口已经与远程仓库(github)建立了联系
 *         再输入命令  git pull origin master
 *          -- 该命令运行完毕, github 仓库的 文件(readme.md) 就下载到了 本地仓库
 *
 *  将本地文件推到 github 远程仓库:
 *    首先将文件 保存到 暂存区, 再 push 到 github
 *      1. git add 文件名
 *      2. git commit -m '别名(还是任务名)'(可选)
 *      3. git push origin master
 *    注: 如果是文件夹, 则表示为: git add .   # 表示当前目录的所有文件
 *
 *  clone 远程仓库到本地:
 *     git clone https://github.com/childnn/child0.git
 *    或 git clone git@github.com:childnn/child0.git
 *
 * 一些术语:
 *   工作目录(working directory): .git 文件夹 所在的目录(准确来说是 主文件夹: .git 有可能在 工作区下的子文件夹下)  -- 也叫 工作区
 *      如果要向本地仓库添加文件, 该文件必须与 .git 在 同一目录下
 *   版本库(repository): 就是 .git 文件夹
 *      暂存区(stage): 是版本库(.git)的一个区域 - .git 文件夹下的 index 文件
 *      master 分支: 当前版本库的默认分支, 指针 HEAD 指向 master 分支
 *   SSH: secure shell 安全外壳协议
 *
 * ----------------------------------------------------------------------------------------------------------
 *
 * 集中式版本控制系统与分布式版本控制系统
 *  1. 集中式版本控制系统: 版本库集中存放在中央服务器, 使用的时候, 需要先从中央服务器取得最新版本,然后进行编辑修改,
 *       完毕,再把新的版本推送给中央服务器.
 *       集中式版本控制系统最大的缺点在于必须联网才能工作.
 *  2. 分布式版本控制系统: 没有所谓的 "中央服务器", 每个人的电脑上都是一个完整的版本库, 这样, 工作的时候不需要联网,
 *      版本库就在自己的电脑上. 既然每个人的电脑上都有一个完整的版本库,那多个人协作时, 可以互相推送修改后的版本.
 *      和集中式版本控制系统相比,分布式版本控制系统的安全性要高的多,因为每个人的电脑里都有完整的版本库, 某一个人的电脑坏了,
 *      复制其他人的即可, 而 集中式版本控制系统的 中央服务器要是除了问题,所有人都无法使用了.
 *    在实际使用分布式版本控制系统时,很少在两个人的电脑之间推送版本库的修改, 通常有一台专用的 "电脑" 作为 分布式版本控制系统的
 *      "中央服务器", 但这个服务器的作用仅仅是用来方便"交换"大家的修改,没有这个 "中央服务器", 也不影响对版本的修改.
 *   集中式版本控制系统: CVS(少用,开源免费), SVN(开源免费,使用最多的的集中式版本控制系统)
 *          收费的集中式版本控制工具: IBM 的 ClearCase, microsoft 的 VSS
 *   分布式版本控制系统: git, BitKeeper, Mercurial, Bazaar
 *
 *  常用命令:
 *    cat 文件名                   # 查看文件内容
 *    git init                    # 在当前目录创建 git 仓库
 *    git add 文件/文件夹名        # 把文件/文件夹放到 暂存区(版本库的一个缓存区域)
 *    git commit -m 'message'     # 正式提交到仓库(版本库) - 在 commit 之前可以有多个 add 命令
 *    git status                  # 仓库的当前状态(查看是否有文件被修改,有无 add 过的文件待提交 commit)
 *    git diff 文件名              # 查看 文件的改动信息(difference)
 *    git log                     # 显示提交日志 // 或者使用 git log --pretty=oneline 命令,显示结果更清晰
 *    git reset --hard HEAD^      # 回退到上一个版本: 当前版本就是 HEAD, 上一个版本就是 HEAD^, 上上个版本就是 HEAD^^, 上 100 个版本就是 HEAD~100
 *    git reset --hard 版本号前4位 # 到指定版本
 *    git reflog                  # 显示每一次命令
 *      注: 使用 git log 命令查看 提交 历史, 以便确定要 回退 到 过去 哪个版本
 *         使用 git reflog 命令查看 命令 历史, 以便确定要回到 未来的 哪个版本
 *         使用 git reset --hard commit_id  命令,回到指定版本, HEAD 指向的版本就是当前版本.
 *
 * git add 命令 实际上是把文件添加到 暂缓区
 * git commit 命令 提交更改, 实际上就是把暂缓区的所有内容提交到 当前分支
 *   可以理解为: 需要提交的文件首先都放到(add)暂缓区,然后一次性提交(commit) 到当前分支
 *
 * 当修改/增加文件后, 使用 git status 命令后, 显示的信息说明:
 *   Changes not staged for commit: 下方显示的是 修改但没有被 add 到 暂缓区的文件
 *   Untracked files: 下方显示的是 新增的但没有被 add 到暂缓区的文件
 *   Changes to be committed: add 到了暂缓区(stage)但是还没有被提交的文件
 *   nothing to commit, working tree clean: 没有任何 修改/新增 内容待提交
 *
 * git 之所以比其他版本控制系统设计的优秀,主要在于 git 跟踪并管理的是 文件的修改, 而非文件本身 (曾/删/改 统称 修改)
 * 只有加入(add) 暂缓区(stage)的 文件,才会被 commit 提交.
 *
 * ---------------------------------------------------------------------------------------------------------
 *
 * 关于撤销的命令:
 * 1. git checkout -- 文件名             # 丢弃工作区的修改
 *      bash 源码: (use "git checkout -- <file>..." to discard changes in working directory)
 *   撤销修改的两种情形:
 *      1). 文件自修改后还没有被放到 stage (暂缓区), 这时撤销修改就回到和版本库一模一样的状态
 *      2). 文件已经添加到暂缓去之后, 又做了修改, 这时撤销就回到添加到 暂缓区后的状态
 *      简而言之: 撤销(checkout), 就是让文件回到最近一次 git commit 或 git add 时的状态
 * 2. git reset HEAD 文件名              # 丢弃 已经添加到 暂缓区(stage)的修改  # 注意与上面的区别
 *      bash 源码: (use "git reset HEAD <file>..." to unstage)
 *      该命令相当于回到 最近的已更新(已提交commit过)的版本(HEAD 即是最新版), (清除暂缓区的指定文件)
 *      git reset 上面也用到了: 可以回退指定版本, 也可以把 暂缓区的修改 回退到 工作区原状态
 *     使用 git reset HEAD 文件名  命令之后, 暂缓区回退, 但是 工作区 有修改,
 *       再使用 git checkout -- 文件名  命令, 丢弃工作区的修改
 *    注: 如果已经提交(commit) 了修改到 本地版本库, 想要回退 上一个版本, 使用上面的命令 git reset --hard HEAD^ 回退上一个版本
 *     但是, 如果已经提交到了远程版本库, 就不能使用这种方式回退了.
 *
 * -----------------------------------------------------------------------------------------------------------
 * log:
 * $ git log -p FILENAME
 *
 * 关于删除文件:
 *  1. rm 文件名
 *       # 这个命令输出后, 工作区的文件被删除, 但是 版本库的文件并没有删除
 *     这时, 有两个选择, 一个是确实要从版本库中删除该文件, 使用命令
 *      1) git rm 文件名               # 删除版本库中指定文件
 *             git add 文件名          # 效果相同   (use "git add/rm <file>..." to update what will be committed)
 *      2) git commit -m 'message'    # 提交: 确认删除
 *      第二种, 误删, 回退(这种情况是工作目录没有文件,但是版本库还有文件)
 *       git checkout -- 文件名       #(use "git checkout -- <file>..." to discard changes in working directory)
 *    注:
 *       1) 从来没有被添加到版本库的文件被删除,是无法通过这种方式恢复的.
 *       2) 只能恢复到最近的版本,意味着回退会丢失最近一次提交后的修改内容.
 *
 * -------------------------------------------------------------------------------------------------------------
 *
 * 远程仓库: git 的重要功能
 *    git 是一个分布式版本控制系统,同一个 git 仓库,可以分布到不同的机器上
 *    最早,必定只有一台机器有一个 原始版本库, 此后,别的及其可以 "克隆" 这个原始版本库,
 *    而且每台机器的版本库都是一样的,并没有主次之分(同一台电脑上,也可以克隆多个版本库, 只要不在同一个目录)
 *    实际应用: 找一台电脑当服务器的角色, 24*7 开机,其他人都可以从这个 服务器仓库 克隆一份 版本库到自己的电脑上,
 *     并且各自把各自的提交(commit)推送(push)到服务器仓库里,也可以从服务器仓库拉去(pull)别人提交的数据
 *    (github 实际上就可以认为是一个 git服务器仓库)
 *   1.创建 SSH key
 *    $ ssh-kegen -t rsa -C "邮箱名"
 *     在用户目录下生成 .ssh 文件夹, 目录下有两个文件: id_rsa 和 id_rsa.pub, id_rsa 是 私钥, id_rsa.pub 是 公钥(public)
 *   2. 登录 GitHub, 打开 "account settings", 点击 SSH and GPG keys, 然后点击 "add SSH key", 填入 公钥信息即可.
 *      SSH 协议: 通过 公钥, 确定该信息是否来自对应的 私钥.
 *     另: github 撒谎给你的免费托管信息任何人都可以查看, 但只有本人可以修改.
 *
 *  3. 添加远程库: 在 github 新建仓库
 *     登录 GitHub, "create new repo"
 *  4. 关联本地库与远程库:
 *     $ git remote add origin git@github.com:childnn/child.git
 *  5. 将本地库的内容推送到远程库
 *     $ git push -u origin master   # 第一次 push 之后, 该命令可以简化为 git push origin master
 *  注: 分布式版本控制系统的最大好处之一,就是本地工作不需要考虑远程库的存在,也就是没有联网也可以正常工作,
 *    而 SVN 在没有联网的时候是拒绝使用的.
   修改 remote 地址
    $ git remote set-url <remote_name> <remote_url>
 *
 *  克隆远程库到本地库:
 *   $ git clone git@github.com:childnn/child1.git
 *
 * -------------------------------------------------------------------------------------------------------------
 *
 * 分支:
 *  1. $ git checkout -b dev   # 在当前 版本库创建 并切换 分支 dev
 *    相当于以下两条命令:
 *     $ git branch dev   # 创建分支
 *     $ git checkout dev # 切换分支
      $ git checkout -b <new_branch> [<start_point>]
       # 从指定提交点切换分支
      $ git checkout --orphan <new_branch>
       # 切换到新分支,此分支没有任何 commit, 需要手动执行 commit, 可以消除原始分支上的 commit log.
 *  2. $ git branch    # 查看当前分支
       $ git branch -r    # 查看远程所有分支
       $ git branch -a    # 查看本地和远程的所有分支
 *  3. 在当前分支上修改, 提交
 *  4. 切换到 master 分支
 *     $ git checkout master
 *   查看文件, 发现没有任何修改, 因为 那个修改的提交在 dev 分支上, 而 master 分支此刻的提交点并没有变
 *  5. 合并 dev 到 master 分支
 *    $ git merge dev    # 合并指定分支(dev)到当前分支
 *     合并后,再查看修改内容,现在 master 分支的内容就是最新的了
 *  6. 删除 dev 分支
 *    $ git branch -d dev
 *     删除后, 查看当前分支 git branch, 就只有 master 分支了
    7. 关联本地分支与远程分支.
      $ git branch --set-upstream-to=<name>/<remote_branch> <your_branch>
      <name>: 名称 eg, origin 或者自定义的名称(id).
      <remote_branch>: 远程分支.
      <your_branch>: 需要关联远程的本地分支
    8. push 本地分支到远程指定的分支(远程分支可以不存在, 该命令可以在远程创建新分支)
     $ git push <remote_name> localBranchName:remoteBranchName
     $  push <remote name,一般就是 origin> <本地分支名>:<远程分支名>
     删除远程分支: 向远程推送空分支:
     $ git push <remote_name> :<remote_branch>
 *
 *  当 不同的分支对同一文件做了修改,且都 commit 到本地库后
 *  再执行 $ git merge 分支名 命令时, 会出现 合并冲突
 *  必须 确认修改的内容之后, 再合并, 再 add, 再 commit
 *  7. 查看分支合并情况:
 *    $ git log --graph --pretty=oneline --abbrev-commit
 *  注: 当分支无法合并时,就表示存在 commit 冲突, 解决冲突之后, 再 merge, 再 add/commit
 *    解决冲突就是把 git 合并失败的文件手动编辑后,再提交.
-------------------------------------------------------------------------------------------
    如果希望关联远程仓库指定分支, 由于
    $ git checkout -b <branch_name>
    命令会将当前本地分支的内容切换至新的分支
    需要先使用
    $ git fetch <remote_name> <remote_branch>
    再使用
    $ git checkout -b <new_local_branch> <remote_name>/<remote_branch>
    从远程分支 checkout 出来的本地分支, 称为 跟踪分支(tracking branch). 跟踪分支是一种和某个远程分支
    有直接关联的本地分支. 在跟踪分支里输入 git push, git 会自行推断应该向哪个服务器的哪个分支推送数据.
    同样, 在这些分支里运行 git pull 会获取所有远程索引, 并把它们的数据都合并到本地分支中来.
    -------------------------------------
    fetch & pull
    $ git fetch <remote_name>   # 将某个远程主机的更新全部取回本地
    $ git fetch <remote_name> <remote_branch_name>  # 指定分支, eg: git fetch origin master
    更新后,会返回一个 FETCH_HEAD, 指 fetch 指定分支在服务器上的最新状态
    $ git log -p FETCH_HEAD  # 查看刚取回的更新信息.
    $ git pull <remote_name> <remote_branch_name>:<local_branch_name>
    等价于以下两条命令
    $ git fetch <remote_name> <remote_branch_name>   # 从远程主机的 remote_branch 拉取最新内容
    $ git merge FETCH_HEAD      # 将拉取下来的最新内容合并到当前所在的分支中
    如果远程分支是与当前分支合并,可以省略本地当前分支:
    $ git pull <remote_name> <remote_branch_name>
    ==============================
    在新的 workspace 使用 fetch
    $ git init
    $ git fetch <git 地址>
    $ git checkout -b <local_branch_name>
    $ git merge FETCH_HEAD
    ## 以上操作可以把远程指定地址的文件 down 到本地

-------------------------------------------------------------------------------------------
 *
 * 分支的管理策略
 *  通常合并分支时,如果可能, git 会用 fast format 模式, 这种模式下, 分支删除后, 会丢掉分支信息
 *   如果要强制禁用 fast format 模式, git 就会再 merge 时生成一个新的 commit, 这样 分支历史上就可以看出分支信息了
 *  1. 创建并切换分支
 *    $ git checkout -b dev
 *  2. 修改文件并提交
 *    $ git add readme.txt
 *    $ git commit -m 'merge'
 *  3. 切换到 master 分支
 *    $ git checkout master
 *  4. 合并分支: 以 禁用 fast format 的方式
 *    $ git merge --no-ff -m 'merge with no-ff' dev
 *    注: 因为要创建一个新的 commit, 所以加上 -m 参数, 把 commit 描述写进去
 *  5. 合并后,查看 git log 信息: 分支历史
 *    $ git log --graph --pretty=oneline --abbrev-commit
 * 在实际开发中,分支管理的基本原则:
 *   1. master 分支应该时非常稳定的, 仅仅用来发布新版本, 不能对其进行操作
 *   2. 业务活动应该在 dev 上进行, 也就是说, dev 分支是不稳定的
 *     当有新版本需要发布时, 再把 dev 分支合并到 master 上, 通过 master 分支发布正式版本
 *
 * bug 分支:
 *  需要修改 bug 而 dev 上正在进行的 工作还没有提交
 *  缓存当前工作进度:
 *   $ git stash
 *  创建 bug 分支: $ git checkout -b bug-01
 *  修复 bug 并提交: $ git add/commit..
 *  切换到 master 分支: 合并 bug 分支 : $ git checkout master -> $ git merge --no-ff -m 'bug' bug-01
 *  删除 bug 分支: $ git branch -d bug-01
 *  切换到 dev 继续之前的工作进度: $ git checkout dev
 *  展示当前分支的进度缓存: $ git stash list
 *  恢复工作进度: $ git stash pop   # 该命令 等价于 $ git stash apply + $ git stash drop 命令 (恢复工作进度,并删除缓存)
 *  如果 $ git stash list 展示了多个 stash, 使用 $ git stash apply stash@{index} 命令
 *
 *  丢弃一个没有被合并的分支:
 *   $ git branch -D <name>
 *
 * -------------------------------------------------------------------------------------------------------------
 *
 * 多人协作与远程仓库:
 *  查看远程库的信息
 *   $ git remote
 *   或 $ git remote -v  # 显示详细信息
 *  推送分支: 就是把该分支上的所有本地提交 推送到远程库. 推送时, 要指定本地分支, 这样, git 就会把该分支推送到远程库对应过的远程分支上
 *   $ git push origin master
 *   如果要推送 dev 分支, 就是用命令
 *    $ git push origin dev
 *  如果从远程克隆下来后
 *   $ git checkout -b dev
 *
 * -------------------------------------------------------------------------------------------------------------
 *
 * 标签:
 *   发布一个版本,就在版本库中打一个标签, 这样, 就唯一确定了打标签时刻的版本.
 *   将来无论什么时候, 取某个标签的版本, 就是把那个打标签的时刻的历史版本取出来.
 *   标签也是版本库的一个快照.
 *  在指定分支创建标签:
 *    $ git tag v1.0
 *  查看所有标签:
 *    $ git tag
 *  给指定的 commit id 打标签
 *    $ git tag v0.9 commit_id
 *  查看指定标签信息:
 *    $ git show <tagname>
 *  创建带有说明的标签, 用 -a 指定标签名, -m 指定说明文字
 *    $ git tag -a v0.1 -m 'version 0.1' commit_id
 *  删除标签:
 *    $ git tag -d v0.1
 *  推送指定标签到远程:
 *    $ git push origin v1.0
 *  推送全部尚未推送的标签到远程:
 *    $ git push origin --tags
 *  删除已经推送到远程的标签:
 *     先删除本地: $ git tag -d v0.9
 *     再删除远程: $ git push origin :refs/tags/v0.9
 *
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * 关于 GitHub
 *  1. 参与开源项目
 *    访问开源项目的主页, 点右上角的 "fork", 将项目 colne 到自己的账号下;
 *    再从自己的账号下克隆到 本地库
 *     eg: $ git clone git@github.com:childnn/bootstrap.git
 *   注: 一定要从自己的账号下 clone 仓库,这样才能推送修改.
 *      如果直接从 原作者的仓库地址 clone, 因为没有权限,将不能推送修改.
 *    在本地修改源码,提交本地库,推送远程库
 *    如果希望原作者接受你的修改,可以在 github 上发起 一个 "pull request"
 *  2. 查看/删除本地已关联的远程库
 *     查看: $ git remote -v
 *     删除: $ git remote rm origin
 *  3. 同一个本地库关联多个远程库: git 给远程库的默认名称是 origin, 多个远程库时,需要不同的名称来标识不同的远程库
 *     可以先删除名为 origin 的远程库:
 *      $ git remote rm origin
 *     在关联不同来源的远程库
 *      1) GitHub: $ git remote add github git@github:childnn/child.git
 *      2) 码云: $ git remote add gitee git@gitee.com:childnn/child.git
 *    推送远程库:
 *     $ git push github master
 *     $ git push gitee master
     4. 重命名远程地址名称(就是和远程 git 地址关联的唯一名称): -- 一个 git 本地仓库可以关联多个远程库
        $ git remote rename <old> <new>
        重命名本地分支
        $ git branch -m <old-branch> <new-branch>
        重命名远程分支: 先删除远程分支, 再新建分支.
        $ git push --delete <remote_name> <remote_branch_name>      # 删除远程分支.
        $ git branch -m <old_local_branch> <new_local_branch>       # 重命名本地分支.
        重命名本地当前分支可以省略旧名称
        $ git branch -m <new_local_branch>   # 重命名本地当前分支
        $ git push <remote_name>:<branch_name>
     5. $ git remote           # 类似 $ git branch 命令, 查看当前关联的远程地址名称.
       # 也是类似 $ git remote -v 命令.

 *
 * ---------------------------------------------------------------------------------------------------------------------
 *
 *  自定义 git
 *   查看当前本地库是否添加密钥
 *     $ ssh-add -l
 *   查看 ssh 是否连接成功
 *     $ ssh -T git@git.com
 *  1. 设置 用户名/邮箱
 *    $ git config --global user.name 'childnn'
 *    $ git config --global user.email '274979673@qq.com'
 *     # --global 参数的设置之后,表示本台机器上的所有 git 仓库都会使用这个配置
 *       # 也可以对某个仓库指定不同的用户名和 email 地址.
 *  2. 关于忽略文件
 *    忽略原则:
 *    1) 忽略操作系统自动生成的文件,比如缩略图等；
 *    2) 忽略编译生成的中间文件、可执行文件等,也就是如果一个文件是通过另一个文件自动生成的,那自动生成的文件就没必要放进版本库,比如Java编译产生的.class文件；
 *    3) 忽略你自己的带有敏感信息的配置文件,比如存放口令的配置文件。
 *   使用:
 *     定义文件, 文件名为 .gitignore, 把所有要忽略的文件的文件名写入
 *     再把 .gitignore 提交到 git.
 *     此后, 如果添加(add)一个文件到 git 时失败, 说明该文件在 .gitignore 中被忽略了
 *     如果确实需要添加,可以使用强制添加命令
 *       $ git add -f 文件名
 *     检测 .gitignore 文件的命令: 查看 上述添加的文件在 .gitignore 文件的第几行被忽略了
 *       $ git check-ignore -v 文件名

 -------------------------------------------------------------------------------------
     .gitignore 文件中,每一行的忽略规则的语法如下：

     空格不匹配任意文件,可作为分隔符,可用反斜杠转义
     # 开头的文件标识注释,可以使用反斜杠进行转义
     ! 开头的模式标识否定,该文件将会再次被包含,如果排除了该文件的父级目录,则使用 ! 也不会再次被包含。可以使用反斜杠进行转义
     / 结束的模式只匹配文件夹以及在该文件夹路径下的内容,但是不匹配该文件
     / 开始的模式匹配项目跟目录
     如果一个模式不包含斜杠,则它匹配相对于当前 .gitignore 文件路径的内容,如果该模式不在 .gitignore 文件中,则相对于项目根目录
     ** 匹配多级目录,可在开始,中间,结束
     ? 通用匹配单个字符
     [] 通用匹配单个字符列表

 -------------------------------------------------------------------------------------
 .gitignore
    bin/: 忽略当前路径下的bin文件夹,该文件夹下的所有内容都会被忽略,不忽略 bin 文件
    /bin: 忽略根目录下的bin文件
    /*.c: 忽略 cat.c,不忽略 build/cat.c
    debug/*.obj: 忽略 debug/io.obj,不忽略 debug/common/io.obj 和 tools/debug/io.obj
    **/foo: 忽略/foo, a/foo, a/b/foo等
    a/**/b: 忽略a/b, a/x/b, a/x/y/b等
    !/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件
    *.log: 忽略所有 .log 文件
    config.php: 忽略当前路径的 config.php 文件


 -------------------------------------------------------------------------------------

     .gitignore只能忽略那些原来没有被track的文件,如果某些文件已经被纳入了版本管理中,则修改.gitignore是无效的。

     解决方法就是先把本地缓存删除(改变成未track状态),然后再提交:

     git rm -r --cached .
     git add .
     git commit -m 'update .gitignore'

 -------------------------------------------------------------------------------------

 回退
 *   git revert HEAD
 *   git push origin master
     解决办法：
	# 清除本地库的缓存
	git rm -r --cached .
	# 讲本地代码重新加入
	git add .
	# 并让 .gitignore 文件夹生效,读取我配置的过滤规则
	git commit -m "update .gitignore"
    
	git push origin 分支名 –-force, 强制提交当前版本号。
	
	删除远程库指定文件夹：(文件不用 -r) 
	 $ git rm -r --cached business-center/global-voyage-center
	 $ git commit -m 'message'
	 $ git push <id(origin)> 分支名
	 
	----------------------------------------------------------------------- 
 
 *   3. 关于别名
 *     $ git config --global alias st status
 *       # 为 status 设置别名为 st
 *     $ git config --global alias co checkout
 *     $ git config --global alias ci commit
 *     $ git config --global alias br branch
 *     $ git config --global alias unstage 'reset HEAD'
 *        # $ git reset HEAD <filename> 命令可以把 暂缓区(stage)的修改撤销(unstage), 重新返回工作区
 *     $ git config --global alias last 'log -l'
 *        # $ git last  显示最近一次提交
 *     $ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
 *   注: 配置 config 时, 加上 --global 是针对当前用户起作用, 如果不加, 只针对当前仓库起作用
 *
 * -------------------------------------------------------------------------------------------------------------------
 *
 *  1. 版本控制工具应该具备的功能
 *     1) 协同修改
 *       多人并行不悖的修改服务器端的同一个文件。
 *     2) 数据备份
 *       不仅保存目录和文件的当前状态, 还能保存每一个提交过的历史状态.
 *     3) 版本管理
 *        在保存每一个版本的文件信息的时候要做到不保存重复数据,以节约存储空间,
 *        提高运行效率. 这方面 SVN(subversion) 采用的是增量式管理的方式, 而 git 采取了文件系统快照的方式
 *     4) 权限控制
 *        a) 对团队中参与开发的人员进行权限控制.
 *        b) 对团队外开发者贡献的代码进行审核 -- git 独有的功能
 *     5) 历史记录
 *        a) 查看修改人,修改时间,修改内容,日志信息
 *        b) 将本地文件恢复到某一个历史状态
 *     6) 分支管理
 *        允许开发团队在工作过程中多条生产线同时推进任务, 进一步提高效率
 *  2. 关于版本控制
 *     版本控制: 工程设计领域中使用版本控制管理工程蓝图的设计过程, 这是一种 管理思想.
 *    IT 领域的 版本控制工具:
 *      集中式版本控制工具: CVS, SVN, VSS
 *      分布式版本控制工具: git, mercurial, bazaar, darcs
 *  3. git 优势
 *     1) 大部分操作在本地完成,不需要联网
 *     2) 完整性保证 (hash)
 *     3) 尽可能添加数据而不是删除或修改数据: 可以移动到指定的版本
 *     4) 分支操作非常快捷流畅: 与 git 使用快照方式管理文件 有关: 快照就是一些指针,只需要移动指针就可以执行相关操作
 *     5) 与 linux 命令全面兼容
 *  4. git 分区
 *    工作区: working directory  -- 写代码
 *    暂存区: stage/index   -- 临时存储
 *    本地库: repository  -- 历史版本
 *  5. 本地库与远程库
 *    1) 本地库1(原始版本) -> push -> 远程库A(原始库)
 *    2) 远程库A -> clone(团队内部的权限) -> 本地库2(修改) -> push(加入团队:获得 push 权限) -> 远程库A
 *    3) 远程库A -> fork -> 远程库B(团队外的人员)   # 把别人的远程库 'clone' 到自己的远程库
 *    4) 远程库B -> clone -> 本地库3(修改) -> push -> 远程库B  # 不能把修改后的代码直接 push 到原始的远程库: 没有权限
 *    5) 远程库B -> pull request(发起 拉取请求) -> 远程库A(审核请求) -> merge(接受拉取请求:合并代码)
 *    6) 想获得最新的代码,就得先 pull 到本地
 *  6. 本地库初始化
 *     1) $ git init   # 初始化本地库: 在当前目录生成 .git 目录
 *         .git 目录下存放的是 本地库 的相关目录和文件
 *     2) 设置签名: 用户名/邮箱  -- 没有实际意义, 只是用来区分用户
 *        命令的级别:
 *         a) 项目级别/仓库级别: 仅在当前本地库范围有效
 *            $ git config user.name 用户名
 *            $ git config user.email 邮箱
 *           //项目级别的配置保存在 .git/config 文件中: $ cat ./git/config 可以查看
 *         b) 系统用户级别: 登录当前操作系统的用户范围
 *            $ git config --global user.name 用户名
 *            $ git config --global user.email 邮箱
 *            //系统用户级别的配置保存在: /c/Users/child/.gitconfig 文件中  -- 别名等设置也会保存其中
 *        级别的优先级:
 *          a) 就近原则: 项目级别优先于系统用户级别, 二者都设置了,则操作 项目级别的签名
 *          b) 如果只有系统用户级别的签名,就以系统用户级别的签名为准
 *          c) 不允许二者都没有
 *   7. 使用
 *      $ vim good.txt  # 打开 good.txt (如果不存在就创建文件)
 *      $ git add good.txt  # 将 工作区 文件的新建/修改 add 到 stage(暂存区)
 *      $ git rm --cached good.txt # 将文件从 stage 清除 (撤销 add)
 *      $ git commit   # 进入 vim 编辑器(linux 的 vi 命令), 写入 commit message   // 使用 :set nu 可以显示行号
 *      修改 文件之后:
 *       $ git status  # 展示当前 git 工作区/暂存区 状态
 *       $ git checkout -- 文件名  # 撤销更改
 *       或 执行 add/commit 命令 update 更改到 本地库
 *        // 可以使用 $ git commit -a   替代 add/commit 命令的组合
 *   8. log
 *      空格: 向下翻页
 *      b: 向上翻页
 *      q: 退出
 *      $ git log
 *      $ git --pretty=oneline
 *      $ git --oneline
 *      $ git reflog
 *   9. 版本变换: 前进后退
 *      1) 基于索引操作: 推荐(可进可退)
 *          $ git reset --hard 索引值
 *      2) 基于 ^ 操作: 只能后退
 *          $ git reset --hard HEAD^    # 后退一个版本
 *      3) 基于 ~ 操作: 只能后退
 *          $ git reset --hard HEAD~n   # 后退 n 个版本
 *      注: 与 --hard 相对应的

 --------------------------------------------------------------------
  Rebase 用法一:
  使用 rebase 合并本地多个 commit 为一个完整的 commit
  $ git rebase -i [start_point] [end_point]
   # -i 指 --interactive, 即弹出交互式界面让用户编辑完成合并操作
   # start_point 和 end_point 指定一个编辑区间,如果不指定 end_point, 则该区间的终点默认是当前分支 HEAD 所指向的 commit
   # 注: 该区间指定的是一个前开后闭的区间.
 执行命令后, 会出现如下交互界面
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Rebase 7c3f5f1..a5b9510 onto 7c3f5f1 (1 command)
  pick b4d476 add b.txt
  s ssasss add c.txt
  s ssdfss add d.txt
 # 这里把需要合并的 pick 改为 s 即表示将当前提交合并到上一个, 第一个不能改(其前面没有可合并的提交)
 #
 # Commands:
 # p, pick <commit> = use commit
 # r, reword <commit> = use commit, but edit the commit message
 # e, edit <commit> = use commit, but stop for amending
 # s, squash <commit> = use commit, but meld into previous commit   # 将该 commit 和前一个 commit 合并成一个
 # f, fixup <commit> = like "squash", but discard this commit's log message
 # x, exec <command> = run command (the rest of the line) using shell
 # b, break = stop here (continue rebase later with 'git rebase --continue')
 # d, drop <commit> = remove commit
 # l, label <label> = label current HEAD with a name
 # t, reset <label> = reset HEAD to a label
 # m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
 # .       create a merge commit using the original merge commit's
 # .       message (or the oneline, if no original merge commit was
 # .       specified). Use -c <commit> to reword the commit message.
 #
 # These lines can be re-ordered; they are executed from top to bottom.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 编辑保存后出现注释界面,根据需要修改.
 提交后,即完成了 多个本地 commit 的合并
注:
 eg1: $ git rebase -i 36334db    # 将指定提交下一个提交开始(前开区间: start point^),直到 HEAD 为止合并
 eg2: $ git rebase -i HEAD~3     # 将包括 HEAD 在内的之前 3 个提交合并为一个.
 eg3: $ git rebase -i 3333fdf  222sdf   # 将 3333fdf + 1 到  222sdf 的 commit 合并.
 ====================
 rebase 用法二:
 将某一段 commit 粘贴到另一个分支上(如果只是某一两个分支,使用 cherry-pick)
 $ git rebase [start_point] [end_point] --onto [branch_name]
    # 将当前分支的 指定提交合并到 branch_name 分支
 $ git checkout [branch_name]
    # 切换到指定分支(目的分支)
    # 此时, HEAD 指针还没有移动, 在原始位置.
 $ git reset --hard <commit_id>
    # commit_id 指 rebase 后的提交点(窗口会有提示).




   merge 与 rebase.
    rebase:
     $ git checkout experiment   # 切换分支.
     $ git rebase master         # 变基当前分支到指定分支.
     它的原理是回到两个分支最近的共同祖先,根据当前分支(也就是要进行变基的分支 experiment)后续的历次提交对象
     (这里只有一个 C3),生成一系列文件补丁,然后以基底分支(也就是主干分支 master)最后一个提交对象(C4)为新的出发点,
     逐个应用之前准备好的补丁文件,最后会生成一个新的合并提交对象(C3'),从而改写 experiment 的提交历史,使它成为 master 分支的直接下游
     再快进 master 分支:
     $ git checkout master
     $ git merge experiment
     关于 git rebase --onto 操作.
     例, 为了给服务器端添加一些功能而创建了特性分支 server, 然后提交 C3 和 C4. 然后又从 C3 的地方再增加一个 Client 分支来对客户端代码
     进行一些相应修改, 所以提交了 C8 和 C9. 最后又回到 server 分支提交 C10.
     此即 从一个特性分支里再分出一个特性分支的历史. 假设在接下来的一次软件发布中, 我们决定把客户端的修改并到主线中, 而暂缓并入服务端软件的修改/
     此时, 就可以把基于 client 分支而非 server 分支的改变(即 C8 和 C9), 跳过 server 直接放到 master 分支中重演一遍, 但这需要用 git rebase
     的 --onto 选项指定新的基地分支 master.
     $ git rebase --onto master server client
     解释: 取出 client 分支, 找出 client 分支和 server 分支的共同祖先之后(C3 以后, 不包括 C3, 即 C8 和 C9)的变化, 然后把它们在 master 上重演一遍.
     之后再快进 master 分支.
     $ git checkout master  # 切换到 master.
     $ git merge client     # 将 client 合并到 当前分支(master).
     现在, 决定把 server 分支的变化也包含进来. 可以直接把 server 分支变基到 master, 而不用切换到 server 分支之后再执行变基操作 --
     $ git rebase [主分支] [特性分支] 分支会先取出特性分支 server, 然后在主分支 master 上重演.
     $ git rebase master server
     之后再快进主干分支 master.
     $ git checkout master
     $ git merge server
     注: 变基的风险.
     一旦分支中的提交对象发布到公共仓库, 就千万不要对该分支进行变基操作.
     如果把变基当成一种在推送之前清理提交历史的手段，而且仅仅变基那些尚未公开的提交对象，就没问题。
     如果变基那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。

    merge:
     $ git

   查看指定文件每一行的修改历史.
   $ git blame [文件名]

 *
 *
 */
public class Demo {
    /**
     * Quick setup — if you’ve done this kind of thing before
     * or
     * HTTPS: https://github.com/childnn/child.git
     * SSH: git@github.com:childnn/child.git
     *
     * Get started by creating a new file or uploading an existing file. We recommend every repository include a README, LICENSE, and .gitignore.
     *
     * …or create a new repository on the command line
     * echo "# child" >> README.md
     *      git init
     *      git add README.md
     *      git commit -m "first commit"
     *      git remote add origin https://github.com/childnn/child.git
     *      git push -u origin master
     * …or push an existing repository from the command line
     *      git remote add origin https://github.com/childnn/child.git
     *      git push -u origin master
     * …or import code from another repository
     * You can initialize this repository with code from a Subversion, Mercurial, or TFS project.
     */
}
