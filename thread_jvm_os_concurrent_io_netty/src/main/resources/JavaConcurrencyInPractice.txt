先让代码正确,然后再让它跑得快.
锁与同步机制的几个重要方面:
    原子性,
    可见性,

线程的风险:
    1. 安全风险: 竞争条件 race condition
    2. 活跃度危险: 当一个活动进入某种它永远无法再继续执行的状态时, 活跃度失败就发生了.
        一种活跃度失败可以发生在顺序程序中, 这就是粗心造成的无限循环, 那些循环之后的代码永远不会被执行.
        多线程的引入带来了更多的活跃度危险. 例如, 如果线程 A 等待一个线程 B 独占资源, B 永远不释放这个资源,
        A 将永远等待下去.
ThreadLocal: 与同步机制面向的领域不同. 同步机制是为了同步多个线程对相同资源的并发访问, 是多个线程之间进行通信的有效方式;
   而 ThreadLocal 是为了隔离多个线程的数据共享, 从根本上避免了多个线程之间对共享资源的竞争, 也就不需要对多个线程进行同步了.
   即: 多个线程共享资源, 则使用同步机制; 隔离多线程的共享冲突, 则使用 ThreadLocal.

共享: 一个变量可以被多个线程访问
可变: 变量的值在其生命周期内可以改变
并发修复: 要想数据线程安全必须满足以下三条件之一
  1. 不要跨线程共享变量
  2. 使状态变量为不可变
  3. 在访问状态变量的时候使用同步
线程安全
    当多个线程访问一个类时,如果不用考虑这些线程在运行时环境下的调度和交替执行,并且不需要额外的同步
    及在调用方代码不必作其他的协调,这个类的行为仍然是正确的,那么称这个类是线程安全的.
    线程安全类在并发环境中的隐患不会多于单线程环境下的隐患.
无状态对象永远是线程安全的:线程访问无状态对象的行为,不会影响其他线程访问该对象时的正确性.
    如 Servlet, 在没有共享变量的情况下, 就是无状态对象.
原子性:
     假如有操作 A 和 B, 如果从执行 A 的线程的角度看, 当其他线程执行 B 时, 要么 B 全部执行完成, 要么一点都没执行,
     这样 A 和 B 互为 原子操作. 一个原子操作是指: 该操作对于所有的操作, 包括它自己, 都满足前述的状态.
     原子操作包括的全部执行过程看作是 一个复合操作, 要想保证符合操作的原子性, 必须使用原子性机制, 如 锁.
    1. read-modify-write
        自增操作是非原子操作,自增操作是 3 个离散操作的简写形式:获得当前值,加 1,写回新值.
        这是一个 “读-改-写(read-modify-write)” 操作
    2. check-then-act: 检查再运行
      使用潜在的过期观察值来作决策或执行计算: 你观察到一些事情为真(文件 X 不存在), 然后基于你的观察去执行一些动作(创建文件 X);
      但事实上, 从观察到执行操作的这段时间内, 观察结果可能已经无效了(有人在此期间创建了文件 X), 从而引发错误(非预期的异常, 重写数据或破坏文件).
      惰性初始化(lazy initialization) 可能出现此情况, 因此必须使用 DCL(double checked lock).
       参见: org.anonymous.concurrencyinpractice.DoubleCheckedLock
    Servlet 使用 AtomicLong 实现线程安全的请求计数示例:
       参见: org.anonymous.concurrencyinpractice.CountingFactory
        非安全形式参见: org.anonymous.concurrencyinpractice.UnsafeCachingFactorizer
     为了保护多个状态的一致性, 要在单一的原子操作中更新相互关联的状态变量.


synchronized
    1. 原子性(Atomicity): 原子性本身是否可以认为也带有互斥的含义?
    2. 内存可见性(Visibility): 我们不仅希望能够避免一个线程修改其他线程正在使用的对象的状态, 而且希望确保当一个线程修改了对象的状态后,
       其他的线程能够真正看到改变. 但是没有同步, 这些可能都不会发生.
       可见性是微妙的. 在一个单线程化的环境里, 如果向一个变量先写入值, 然后在没有写干涉的清空下读取这个变量, 你希望能得到相同的返回值.
       这看起来是很自然的. 但是当 read/write 发生在不同的线程中时, 情况却根本不是这样. 通常, 不能保证 read 线程及时地读取其他线程
       写入的值, 甚至可以说根本不可能. 为了确保跨线程 write 的内存可见性, 必须使用同步机制.
       可见性示例: org.anonymous.concurrencyinpractice.NoVisibility
    Java 提供了强制原子性的内置锁机制: synchronized 块.
    一个 synchronized 块有两部分: 锁对象的引用, 以及这个锁保护的代码块. synchronized 方法是对跨越了整个方法体的
    synchronized 块的简短表示. synchronized 方法的锁, 就是调用该方法的对象本身, 静态 synchronized 方法从该方法
    所属 Class 对象上获取锁.
    每个 Java 对象都可以隐式地扮演一个用于同步的锁的角色; 这些内置的锁被称为内部锁(intrinsic locks) 或监视器锁(monitor locks).
    执行线程进入 synchronized 块之前会自动获得锁; 而无论通过正常控制路径退出, 还是从块中抛出异常, 线程都在放弃对
    synchronized 块的控制时自动释放锁. 获得内部锁的唯一途径是: 进入这个内部锁保护的同步块或方法.
    内部锁在 Java 中扮演了互斥锁(mutual exclusion lock, 也称 mutex)角色, 意味着至多只有一个线程可以拥有锁,
    当线程 A 尝试请求一个被线程 B 占有的锁时, 线程 A 必须等待或阻塞, 直到 B 释放它. 如果 B 永不释放, A 将永远等下去.

    互斥性(mutual exclusion lock,mutex)
        至多只有一个线程可以拥有锁,当线程 A 尝试请求一个被线程 B 占有的锁时,线程 A 必须等待或者阻塞,直到 B 释放它.
        如果 B 永远不释放锁,A 将永远等下去.
        synchronized 锁也称 内部锁(intrinsic locks)或 监视器锁(monitor locks)
    可重入(reentrancy): 请求计数. org.anonymous.concurrencyinpractice.ReentrantLock1
        线程试图获得它自己占有的锁时,请求会成功.重入 意味着锁的请求是基于 “per-thread”,而不是基于 “per-invocation”
        重入的实现是通过为每个锁关联一个请求计数(acquisition count)和一个占有它的线程.当计数为 0 时,认为锁是未被占用的.
        线程请求一个未被占有的锁时,JVM 将记录锁的占有者,并且将请求计数置为 1. 如果同一线程再次请求这个锁,计数将递增；
        每次占用线程退出同步块,计数器值将递减.直到计数器达到 0 时,锁被释放.
对于每个可被多个线程访问的可变状态变量,如果所有访问它的线程在执行时都占有同一个锁,这种情况下,我们称这个变量是由这个锁保护的.
每个共享的可变变量都需要由唯一一个确定的锁保护. 而维护者应该清楚这个锁.
并不是所有数据都需要锁的保护: 只有那些被多个线程访问的可变数据.
对于每一个涉及多个变量的不变约束, 需要同一个锁保护其所有的变量.
if(!vector.contains(element))
    vector.add(element);
虽然 contains 和 add 都是原子的, 但在尝试 "pub-if-absent" 操作的过程中仍然存在竞争条件. 虽然同步方法确保了不可分割操作的
原子性, 但是把多个操作整合到要给复合操作时, 还是需要额外的锁.
---
在没有同步的情况下, 编译器、处理器运行时安排操作的执行顺序可能完全出人意料.在没有进行适当同步的多线程程序中,尝试推断那些
“必然” 发生在内存中的动作时,你总是会判断错误.
非原子的 64 bit operation
    对于 非 volatile 的 long 和 double 变量,JVM 允许将 64 位的读或写划分为两个 32 为的操作.如果读和写发生在不同的线程,这种情况
    读取一个非 volatile 类型 long 就可能会出现得到一个值的高 32 位和另一个值的低 32 位(在 JVM 规范完成时, 很多主流的处理器架构还不能有效
    的支持 64 bit 算数原子操作). 因此,即使你不关心过期数据,但仅仅在多线程程序中使用共享的、可变的 long 和 double 变量也可能是不安全的,
    除非将它们声明为 volatile 类型,或者用锁保护起来.
锁和可见性:
   内置锁可以用来确保一个线程以某种可预见的方式看到另一个线程的影响. 当线程 A 执行一个同步块时, 线程 B 也随后进入被同步一个锁监视的同步块
   中, 这时可以保证, 在锁释放之前对 A 可见的变量值, B 获得锁之后同样是可见的. 换句话说, 当 B 执行到与 A 相同的锁监视的同步块时, A 在同步块之中
   或之前所作的每件事, 对 B 都是可见的. 如果没有同步, 就没有这样的保证.
   锁不仅仅是关于同步与互斥的,也是关于内存可见的.为了保证所有线程都能够看到共享的、可变变量的最新值,读取和写入线程必须使用公共的锁进行同步.
   当访问一个共享的可变变量时, 为什么要求所有线程由同一个锁进行同步?
    1. 为了保证一个线程对数值进行的写入, 其他线程也都可见;
    2. 如果一个线程在没有恰当地使用锁的情况下读取了变量, 那么这个变量很可能是一个过期的数据.
volatile
    一种同步的弱形式, 它确保对一个变量的更新以可预见的方式告知其他线程.
    当一个域声明为 volatile 类型后,编译器与运行时会监视这个变量:它是共享的,而且对它的操作不会与其他的内存操作一起被重排序.
    volatile 变量不会缓存在寄存器或者缓存在对其他处理器隐藏的地方.所以,读一个 volatile 类型的变量时,总会返回由某一线程锁写入的最新值.
    加锁可以保证可见性和原子性；volatile 变量只能保证可见性.-- volatile 不足以使 自增操作(read-modify-write) 原子化,
    除非你能保证只有一个线程对变量执行写操作.
    一个理解 volatile 变量的好方法是: 想象它的行为与 org.anonymous.concurrencyinpractice.SynchronizedInteger
    大致相似, 只不过用 get/set 取代了(实际上 synchronized 对内存可见性的影响比 volatile 变量更强一些)对 volatile 变量的读写操作.
    然而访问 volatile 变量的操作不会加锁, 也就不会引起执行线程的阻塞, 这使得 volatile 变量相对于 synchronized 而言, 只是轻量级的同步机制.
    volatile 变量对可见性的影响所产生的价值远远高于变量本身. 线程 A 向 volatile 变量写入值, 随后线程 B 读取该变量, 所有 A 执行写操作
    前可见的变量的值, 在 B 读取了 volatile 变量后, 成为对 B 也是可见的. 所以从内存可见性的角度看, 写入 volatile 变量就像退出
    同步块, 读取 volatile 变量就像进入同步块. 但是并不推荐过去依赖 volatile 变量所提供的可见性. 依赖 volatile 变量来控制状态可见性的代码,
    比使用锁的代码更脆弱, 更难以理解.
    只有当 volatile 变量能够简化实现和同步策略的验证时, 才使用它们. 当验证正确性推断可见性问题时, 应该避免使用 volatile 变量.
    正确使用 volatile 变量的方式包括: 用于确保它们锁引用的对象的状态的可见性, 或者用于标识重要的声明周期事件(比如初始化或关闭)的发生.
    volatile 变量固然方便, 但也存在限制. 它们通常被当作标识完成, 中断, 状态的标记使用. 尽管 volatile 也可以用来标示其他类型的状态信息,
    但是决定这样做之前请格外小心. 比如, volatile 语义不足以使自增操作(count++)原子化, 除非你能保证只有一个线程对变量执行写操作.
    原子变量(AtomicXxx)提供了 "read-modify-write" 原子操作的支持, 而且常被用作 "更优的 volatile 变量".
    加锁可以保证可见性与原子性; volatile 变量只能保证可见性.
    只有满足一下标准后, 才能使用 volatile 变量:
     1. 写入变量时并不依赖变量的当前值; 或者能够确保只有单一的线程修改变量的值;
     2. 变量不需要与其他的状态变量共同参与不变约束;
     3. 而且, 访问变量时, 没有其他的原因需要加锁
publishing 发布 一个对象的意思是使它能够被当前范围之外的代码所使用.
    比如 将一个引用存储到其他代码可以访问的地方, 在一个非私有的方法中返回这个引用, 也可以把它传递到其他类的方法中.

escape 逸出: 一个对象在尚未准备好时就将它发布.
----------------------------------
java.util.concurrent.ExecutorService 暗示了生命周期有 3 种状态: 运行 running, 关闭 shutting down, 终止 terminated
ExecutorService 最初创建后的初始状态是 运行 状态. shutdown 方法会启动一个平缓的关闭过程: 停止接受新的任务, 同时
等待已经提交的任务完成--包括尚未开始执行的任务. shutdownNow 方法会启动一个强制的关闭过程: 尝试取消所有运行中的
任务和排在队列中尚未开始的任务.
在关闭后提交到 ExecutorService 中的任务, 会被拒绝执行处理器 rejected execution handler 处理. java.util.concurrent.RejectedExecutionHandler
拒绝执行处理器可能只是简单的放弃任务, 也可能引起 execute 抛出一个 unchecked 异常 RejectedExecutionException.
一旦所有的任务全部完成后, ExecutorService 会转入 terminated 状态.
可以调用 awaitTermination 等待 ExecutorService 到达终止状态, 也可以轮询检查 isTerminated 判断 ExecutorService
是否已经终止. 通常 shutdown 会紧随 awaitTerminated 之后, 这样可以产生同步的关闭 ExecutorService 的效果.


