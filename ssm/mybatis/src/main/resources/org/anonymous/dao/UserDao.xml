<?xml version="1.0" encoding="UTF-8" ?>

<!--引入约束-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.anonymous.dao.UserDao">

    <!--在本页面引入 二级缓存机制: 需要开启二级缓存的 sql 语句 需要设置属性 : useCache="true"  -->
    <cache/>

    <!--<cache/>
        基本上就是这样。这个简单语句的效果如下:

        映射语句文件中的所有 select 语句的结果将会被缓存。
        映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。
        缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。
        缓存不会定时进行刷新（也就是说，没有刷新间隔）。
        缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。
        缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。
        提示 缓存只作用于 cache 标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML 映射文件，
        在共用接口中的语句将不会被默认缓存。你需要使用 @CacheNamespaceRef 注解指定缓存作用域。

        <cache
          eviction="FIFO"
          flushInterval="60000"
          size="512"
          readOnly="true"/>
   这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，
   而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。

   可用的清除策略有：

    LRU – 最近最少使用：移除最长时间不被使用的对象。
    FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
    SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。
    WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。
    默认的清除策略是 LRU。

    flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。
    默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。

    size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。

    readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。
    因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。
    速度上会慢一些，但是更安全，因此默认值是 false。

    提示 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true
    的 insert/delete/update 语句时，缓存会获得更新。

        -->

    <!--根据 uid 查询用户: 被 account 引去:  开启二级缓存-->
    <select id="findUserById" resultType="user" parameterType="int" useCache="true">
        SELECT *
        FROM user
        WHERE id = #{随便写也是uid}
    </select>

    <!--查询所有用户: resultType="user"
       查询所有用户, 延迟加载用户的账户: resultMap="userLazy"
    -->
    <select id="findUsers" resultMap="userLazy">
        SELECT *
        FROM user
    </select>

    <resultMap id="userLazy" type="org.anonymous.domain.User">
        <!-- 实例化时注入构造方法.
          属性:
           idArg: ID 参数, 标记出作为 ID 的结果可以帮助提高整体性能.
           arg: 将被注入到构造方法的一个普通结果.
        -->
        <!--<constructor>
            <arg column="id" javaType="int"/>
        </constructor>-->
        <!--user自己的属性-->
        <!--
          id: 一个 ID 结果, 标记出作为 ID 的结果可以帮助提高整体性能.
          result: 注入到字段或 JavaBean 属性的普通结果.
        -->
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="sex" column="sex"/>
        <result property="birthday" column="birthday"/>
        <result property="address" column="address"/>
        <!--配置关联 集合 数据来源:
        select : 关联 sql 来源 - namespace.id (接口名.方法名)
        column: 被引入的 sql 所需的参数 对应的 主类(user)中的 字段名

        javaType: 集合类型
        ofType: 集合泛型
        -->
        <collection property="accounts" javaType="list" ofType="account"
                    select="org.anonymous.dao.AccountDao.findAccountByUId" column="id"/>
    </resultMap>

</mapper>