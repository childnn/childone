<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//log4j/log4j Configuration//EN" "log4j.dtd">
<!--<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">-->

<log4j:configuration>

    <!-- 
    
        OFF 	为最高等级 关闭了日志信息
        FATAL  	为可能导致应用中止的严重事件错误  
        ERROR 	为严重错误 主要是程序的错误  
        WARN 	为一般警告，比如session丢失  
        INFO 	为一般要显示的信息，比如登录登出  
        DEBUG 	为程序的调试信息  
        TRACE 	为比DEBUG更细粒度的事件信息  
        ALL 	为最低等级，将打开所有级别的日志
        ========
        Log4J最常用的日志输出格式为：org.apache.log4j.PatternLayOut，其主要参数为：
            %n - 换行
            %m - 日志内容
            %p - 日志级别(FATAL， ERROR，WARN， INFO，DEBUG or custom)
            %r - 程序启动到现在的毫秒数
            %t - 当前线程名
            %d - 日期和时间, 一般使用格式 %d{yyyy-MM-dd HH:mm:ss， SSS}
            %l - 输出日志事件的发生位置， 同 %F%L%C%M
            %F - java 源文件名
            %L - java 源码行数
            %C - java 类名，%C{1} 输出最后一个元素
            %M - java 方法名
         =======
         -X号: X信息输出时左对齐；
        %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
        %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
        %r: 输出自应用启动到输出该log信息耗费的毫秒数
        %c: 输出日志信息所属的类目，通常就是所在类的全名
        %t: 输出产生该日志事件的线程名
        %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)
        %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
        %%: 输出一个"%"字符
        %F: 输出日志消息产生时所在的文件名称
        %L: 输出代码中的行号
        %m: 输出代码中指定的消息,产生的日志具体信息
        %n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行
        可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
        1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
        2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
        3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
        4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。
    -->
    <!--
    (renderer*, throwableRenderer?,
                               appender*,plugin*, (category|logger)*,root?,
                               (categoryFactory|loggerFactory)?)
    -->
    <!--<renderer renderedClass="" renderingClass=""/>-->
    <!--<throwableRenderer class="">
        <param name="" value=""/>
        <param name="" value=""/>
    </throwableRenderer>-->

    <!-- appender: 日志输出位置 -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <!--<errorHandler class="">
            <param name="" value=""/>
            <root-ref/>
            <logger-ref ref=""/>
            <appender-ref ref=""/>
        </errorHandler>-->
        <!--<param name="" value=""/>
        <rollingPolicy class="" name="">
            <param name="" value=""/>
            <param name="" value=""/>
        </rollingPolicy>
        <triggeringPolicy class="" name="">
            <param name="" value=""/>
            <filter class="">
                <param name="" value=""/>
            </filter>
        </triggeringPolicy>-->
        <!--<connectionSource class="">
            <dataSource class="">
                <param name="" value=""/>
            </dataSource>
            <param name="" value=""/>
        </connectionSource>-->
        <!--
         ConsoleAppender-target: 表示输出目的地
         可以是 System.out: 标准输出设备(缓冲显示屏)
               System.err: 标准错误输出(不缓冲显示屏)
        -->
        <param name="target" value="System.out"/>
        <!-- 日志输出格式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!-- org.apache.log4j.PatternLayout.setConversionPattern
            [%d{yyyy-MM-dd HH:mm:ss SSS}]
            -->
            <param name="conversionPattern" value="[%p][%40.40c]-[%m]%n"/>
        </layout>
        <!-- 过滤器设置日志输出级别 -->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="ALL"/>
            <param name="levelMax" value="FATAL"/>
        </filter>
        <!--<appender-ref ref=""/>-->
    </appender>

    <!-- 日志输出到文件 -->
    <appender name="fileAppender" class="org.apache.log4j.FileAppender">
        <!-- 文件位置 -->
        <param name="file" value="mybatis.log"/>
        <param name="encoding" value="UTF-8"/>
        <!-- 最低输出级别 -->
        <param name="threshold" value="TRACE"/>
        <!-- 是否追加, 默认 true. false 表示覆盖 -->
        <param name="append" value="true"/>
        <!-- 是否启用缓存 buffer, 默认 false-->
        <param name="bufferedIO" value="true"/>
        <!-- 缓存大小: 默认 8k -->
        <param name="bufferSize" value="1024"/>
        <!-- 日志输出格式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!-- org.apache.log4j.PatternLayout.setConversionPattern -->
            <param name="conversionPattern" value="[%p][%d{yyyy-MM-dd HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
    </appender>

    <!-- 输出到文件, 当文件达到指定大小时, 自动备份 -->
    <!--<appender name="rollingAppender" class="org.apache.log4j.RollingFileAppender">
        <param name="file" value="mybatis-rolling.log"/>
        <param name="encoding" value="UTF-8"/>
        <param name="append" value="true"/>
        &lt;!&ndash; 备份日志文件最大个数, 默认 1 &ndash;&gt;
        <param name="maxBackupIndex" value="10"/>
        &lt;!&ndash; 单个文件最大值: 默认 10MB. 单位可以是 KB/MB/GB, 默认 KB &ndash;&gt;
        <param name="maxFileSize" value="10KB"/>
        &lt;!&ndash; 设置日志输出的样式 &ndash;&gt;`
        <layout class="org.apache.log4j.PatternLayout">
            &lt;!&ndash; 日志输出格式 &ndash;&gt;
            <param name="conversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n"/>
        </layout>
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="INFO"/>
            <param name="levelMax" value="INFO"/>
            <param name="acceptOnMatch" value="true"/>
        </filter>
    </appender>-->

    <!-- 日志输出到文件，可以配置多久产生一个新的日志信息文件 -->
    <appender name="dailyRollingAppender" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- 文件文件全路径名 -->
        <param name="File" value="mybatis-dailyRollingAppender.log"/>
        <param name="Append" value="true"/>
        <!-- 设置日志备份频率，默认：为每天一个日志文件 -->
        <param name="DatePattern" value="'.'yyyy-MM-dd'.log'"/>

        <!--每分钟一个备份-->
        <!--<param name="DatePattern" value="'.'yyyy-MM-dd-HH-mm'.log'" />-->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%p][%d{HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
    </appender>


    <!-- (param*, connectionSource?) -->
    <!--<plugin name="" class="">
        <param name="" value=""/>
        <connectionSource class="">
            <dataSource class="">
                <param name="" value=""/>
            </dataSource>
            <param name="" value=""/>
        </connectionSource>
    </plugin>-->

    <!-- (param*,(priority|level)?,appender-ref*) -->
    <!--<category name="" class="" additivity="">
        <param name="" value=""/>
        <appender-ref ref=""/>
        <level value="" class="">
            <param name="" value=""/>
        </level>
        <priority value="" class="">
            <param name="" value=""/>
        </priority>
    </category>-->

    <!-- 可以配置将不同的日志信息输出到不同的文件 -->
    <!--
      class=""
      additivity="false", 表示不继承 root 中的配置
        此时, 必须配置 appender-ref, 否则不会输出日志
        Logger.getLogger("logTest") 会获取此输出器, 不会使用 root 输出器
      如果 additivity="true", 则不应该再配置 appender-ref, 否则会出现重复日志
    -->
    <logger name="org.springframework" additivity="false">
        <!--<param name="" value=""/>-->
        <!--<level value="" class="">
            <param name="" value=""/>
        </level>-->
        <level value="TRACE"/>
        <appender-ref ref="fileAppender"/>
        <appender-ref ref="console"/>

    </logger>

    <logger name="org.apache.ibatis">
        <!--<param name="" value=""/>-->
        <!--<level value="" class="">
            <param name="" value=""/>
        </level>-->
        <level value="TRACE"/>
        <!--<appender-ref ref="fileAppender"/>-->
    </logger>

    <!-- root-logger 配置
     root的作用是收集所有配置的logger反馈上来的信息流并根据配置在root中appender进行输出，
   只要你在looger中配置了additivity="false"，就不会反馈到root中。
   优先级小于具体的logger中配置的级别，只有当具体的logger没有配置的时候，
      这里才会对具体的logger起作用
    -->
    <root>
        <!--<param name="" value=""/>
        <level value="" class="">
            <param name="" value=""/>
        </level>-->
        <!--<priority value="" class="">
            <param name="" value=""/>
        </priority>-->
        <level value="TRACE"/>
        <appender-ref ref="console"/>
        <appender-ref ref="fileAppender"/>
    </root>

    <!--<categoryFactory class="">
        <param name="" value=""/>
    </categoryFactory>
    
    <loggerFactory class="">
        <param name="" value=""/>
    </loggerFactory>-->


</log4j:configuration>