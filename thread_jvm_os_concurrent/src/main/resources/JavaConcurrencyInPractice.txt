共享: 一个变量可以被多个线程访问
可变: 变量的值在其生命周期内可以改变
并发修复:
  1. 不要跨线程共享变量
  2. 使状态变量为不可变
  3. 在任何访问状态变量的时候使用同步
线程安全
    当多个线程访问一个类时，如果不用考虑这些线程在运行时环境下的调度和交替执行，并且不需要额外的同步
    及在调用方代码不必作其他的协调，这个类的行为仍然是正确的，那么称这个类是线程安全的。
    线程安全类在并发环境中的隐患不会多于单线程环境下的隐患。
无状态对象永远是线程安全的：线程访问无状态对象的行为，不会影响其他线程访问该对象时的正确性。
原子性：
    自增操作是非原子操作，自增操作是 3 个离散操作的简写形式：获得当前值，加 1，写回新值。
    这是一个 “读-改-写（read-modify-write）” 操作
synchronized
    互斥性（mutual exclusion lock，mutex）：
        至多只有一个线程可以拥有锁，当线程 A 尝试请求一个被线程 B 占有的锁时，线程 A 必须等待或者阻塞，直到 B 释放它。
        如果 B 永远不释放锁，A 将永远等下去。
    synchronized 锁也称 内部锁（intrinsic locks）或 监视器锁（monitor locks）
    可重入（reentrancy）
        线程试图获得它自己占有的锁时，请求会成功。重入 意味着锁的请求是基于 “per-thread”，而不是基于 “per-invocation”
        重入的实现是通过为每个锁关联一个请求计数（acquisition count）和一个占有它的线程。当计数为 0 时，认为锁是未被占用的。
        线程请求一个未被占有的锁时，JVM 将记录锁的占有者，并且将请求计数置为 1. 如果同一线程再次请求这个锁，计数将递增；
        每次占用线程退出同步块，计数器值将递减。直到计数器达到 0 时，锁被释放。
对于每个可被多个线程访问的可变状态变量,如果所有访问它的线程在执行时都占有同一个锁,这种情况下,我们称这个变量是由这个锁保护的.
每个共享的可变变量都需要由唯一一个确定的锁保护. 而维护者应该清楚这个锁.
并不是所有数据都需要锁的保护: 只有那些被多个线程访问的可变数据.
对于每一个涉及多个变量的不变约束, 需要同一个锁保护其所有的变量.
if(!vector.contains(element))
    vector.add(element);
虽然 contains 和 add 都是原子的, 但在尝试 "pub-if-absent" 操作的过程中仍然存在竞争条件. 虽然同步方法确保了不可分割操作的
原子性, 但是把多个操作整合到要给复合操作时, 还是需要额外的锁.
---
在没有同步的情况下, 编译器、处理器运行时安排操作的执行顺序可能完全出人意料。在没有进行适当同步的多线程程序中，尝试推断那些
“必然” 发生在内存中的动作时，你总是会判断错误。
对于 非 volatile 的 long 和 double 变量，JVM 允许将 64 位的读或写划分为两个 32 为的操作。如果读和写发生在不同的线程，这种情况
读取一个非 volatile 类型 long 就可能会出现得到一个值的高 32 位和另一个值的低 32 位。因此，即使你不关心过期数据，但仅仅在多线程程序中
使用共享的、可变的 long 和 double 变量也可能是不安全的，除非将它们声明为 volatile 类型，或者用锁保护起来。
锁不仅仅是关于同步与互斥的，也是关于内存可见的。为了保证所有线程都能够看到共享的、可变变量的最新值，读取和写入线程必须使用公共的锁进行同步。
volatile
    当一个域声明为 volatile 类型后，编译器与运行时会监视这个变量：它是共享的，而且对它的操作不会与其他的内存操作一起被重排序。
    volatile 变量不会缓存在寄存器或者缓存在对其他处理器隐藏的地方。所以，读一个 volatile 类型的变量时，总会返回由某一线程锁写入的最新值。
    加锁可以保证可见性和原子性；volatile 变量只能保证可见性。-- volatile 不足以使 自增操作(read-modify-write) 原子化, 除非你能保证只有一个线程对变量执行写操作.
    只有满足一下标准后, 才能使用 volatile 变量:
     1. 写入变量时并不依赖变量的当前值; 或者能够确保只有单一的线程修改变量的值;
     2. 变量不需要与其他的状态变量共同参与不变约束;
     3. 而且, 访问变量时, 没有其他的原因需要加锁
publishing 发布 一个对象的意思是使它能够被当前范围之外的代码所使用.
escape 逸出: 一个对象在尚未准备好时就将它发布.
----------------------------------
java.util.concurrent.ExecutorService 暗示了生命周期有 3 种状态: 运行 running, 关闭 shutting down, 终止 terminated
ExecutorService 最初创建后的初始状态是 运行 状态. shutdown 方法会启动一个平缓的关闭过程: 停止接受新的任务, 同时
等待已经提交的任务完成--包括尚未开始执行的任务. shutdownNow 方法会启动一个强制的关闭过程: 尝试取消所有运行中的
任务和排在队列中尚未开始的任务.
在关闭后提交到 ExecutorService 中的任务, 会被拒绝执行处理器 rejected execution handler 处理. java.util.concurrent.RejectedExecutionHandler
拒绝执行处理器可能只是简单的放弃任务, 也可能引起 execute 抛出一个 unchecked 异常 RejectedExecutionException.
一旦所有的任务全部完成后, ExecutorService 会转入 terminated 状态.
可以调用 awaitTermination 等待 ExecutorService 到达终止状态, 也可以轮询检查 isTerminated 判断 ExecutorService
是否已经终止. 通常 shutdown 会紧随 awaitTerminated 之后, 这样可以产生同步的关闭 ExecutorService 的效果.


