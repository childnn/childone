重构-改善既有代码设计

我不是个伟大的程序员, 我只是个有着一些优秀习惯的好程序员. -- Kent Beck (JUnit作者)

1. 如果你发现自己需要为程序添加一个特性, 而代码结构使你无法很方便地达成目的, 那就先重构那个程序, 使特性的添加比较容易进行, 然后再添加特性.
2. 重构之前, 首先检查自己是否有一套可靠的测试机制. 这些测试必须有自我检验能力.
3. 重构技术就是以微小的步伐修改程序. 如果你犯下错误, 很容易便可发现它.
4. 任何一个傻瓜都能写出计算机可以理解的代码. 唯有写出人类容易理解的代码, 才是优秀的程序员.
5. 当你感觉需要撰写注释时, 请先尝试重构, 试着让所有注释都变得多余.
6. 重复代码是软件万恶之源.

重构:
    n: 对软件内部结构的一种调整, 目的是在不改变软件可观察行为的前提下, 提高其可理解性, 降低其修改程本.
    v: 使用一系列重构手法, 在不改变软件可观察行为的前提下, 调整其结构.
    一种更高效且受控的代码整理技术.
    重构的目的是使软件更容易被理解和修改.
    你可以在软件内部做很多修改, 但必须对软件可观察的外部行为只造成很小变化, 或甚至不造成变化.
 与之形成对比的是性能优化. 和重构一样, 性能优化通常不会改变组件的行为(除了执行速度), 只会改变其内部结构.
 但是两者出发点不同: 性能优化往往使代码较难理解, 但为了得到所需的性能你不得不那么做.
 注意!!! 重构不会改变软件可观察的行为--重构之后软件功能一如以往.
